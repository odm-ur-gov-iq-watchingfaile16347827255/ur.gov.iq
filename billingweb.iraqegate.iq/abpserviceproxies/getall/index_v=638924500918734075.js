/* This file is automatically generated by ABP framework to use MVC Controllers from JavaScript. */

var abp = abp || {};
abp.services = abp.services || {};

// module 'app'
(function(){

  abp.services.app = abp.services.app || {};

  // controller 'dynamicEntityProperty'
  (function(){

    abp.services.app.dynamicEntityProperty = abp.services.app.dynamicEntityProperty || {};

    // action 'index'
    abp.services.app.dynamicEntityProperty.index = function(entityFullName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'EEP/DynamicEntityProperty/' + entityFullName + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.dynamicEntityProperty.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPropertiesOfAnEntity'
    abp.services.app.dynamicEntityProperty.getAllPropertiesOfAnEntity = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/GetAllPropertiesOfAnEntity' + abp.utils.buildQueryString([{ name: 'entityFullName', value: input.entityFullName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.dynamicEntityProperty.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicEntityProperty.add = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Add',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicEntityProperty.update = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Update',
        type: 'PUT',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicEntityProperty['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllEntitiesHasDynamicProperty'
    abp.services.app.dynamicEntityProperty.getAllEntitiesHasDynamicProperty = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/GetAllEntitiesHasDynamicProperty',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicEntityPropertyValues'
  (function(){

    abp.services.app.dynamicEntityPropertyValues = abp.services.app.dynamicEntityPropertyValues || {};

    // action 'manageAll'
    abp.services.app.dynamicEntityPropertyValues.manageAll = function(entityFullName, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'EEP/DynamicEntityPropertyValue/ManageAll/' + entityFullName + '/' + entityId + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'tokenAuth'
  (function(){

    abp.services.app.tokenAuth = abp.services.app.tokenAuth || {};

    // action 'authenticate'
    abp.services.app.tokenAuth.authenticate = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/Authenticate',
        type: 'POST',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

    // action 'refreshToken'
    abp.services.app.tokenAuth.refreshToken = function(refreshToken, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/RefreshToken' + abp.utils.buildQueryString([{ name: 'refreshToken', value: refreshToken }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'logOut'
    abp.services.app.tokenAuth.logOut = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/LogOut',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendTwoFactorAuthCode'
    abp.services.app.tokenAuth.sendTwoFactorAuthCode = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/SendTwoFactorAuthCode',
        type: 'POST',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

    // action 'impersonatedAuthenticate'
    abp.services.app.tokenAuth.impersonatedAuthenticate = function(impersonationToken, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/ImpersonatedAuthenticate' + abp.utils.buildQueryString([{ name: 'impersonationToken', value: impersonationToken }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'delegatedImpersonatedAuthenticate'
    abp.services.app.tokenAuth.delegatedImpersonatedAuthenticate = function(userDelegationId, impersonationToken, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/DelegatedImpersonatedAuthenticate' + abp.utils.buildQueryString([{ name: 'userDelegationId', value: userDelegationId }, { name: 'impersonationToken', value: impersonationToken }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'linkedAccountAuthenticate'
    abp.services.app.tokenAuth.linkedAccountAuthenticate = function(switchAccountToken, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/LinkedAccountAuthenticate' + abp.utils.buildQueryString([{ name: 'switchAccountToken', value: switchAccountToken }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getExternalAuthenticationProviders'
    abp.services.app.tokenAuth.getExternalAuthenticationProviders = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/GetExternalAuthenticationProviders',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'externalAuthenticate'
    abp.services.app.tokenAuth.externalAuthenticate = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/ExternalAuthenticate',
        type: 'POST',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

    // action 'testNotification'
    abp.services.app.tokenAuth.testNotification = function(message, severity, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/TestNotification' + abp.utils.buildQueryString([{ name: 'message', value: message }, { name: 'severity', value: severity }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'webhookEvent'
  (function(){

    abp.services.app.webhookEvent = abp.services.app.webhookEvent || {};

    // action 'get'
    abp.services.app.webhookEvent.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookEvent/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'webhookSendAttempt'
  (function(){

    abp.services.app.webhookSendAttempt = abp.services.app.webhookSendAttempt || {};

    // action 'getAllSendAttempts'
    abp.services.app.webhookSendAttempt.getAllSendAttempts = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSendAttempt/GetAllSendAttempts' + abp.utils.buildQueryString([{ name: 'subscriptionId', value: input.subscriptionId }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSendAttemptsOfWebhookEvent'
    abp.services.app.webhookSendAttempt.getAllSendAttemptsOfWebhookEvent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSendAttempt/GetAllSendAttemptsOfWebhookEvent' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'resend'
    abp.services.app.webhookSendAttempt.resend = function(sendAttemptId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSendAttempt/Resend' + abp.utils.buildQueryString([{ name: 'sendAttemptId', value: sendAttemptId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'webhookSubscription'
  (function(){

    abp.services.app.webhookSubscription = abp.services.app.webhookSubscription || {};

    // action 'publishTestWebhook'
    abp.services.app.webhookSubscription.publishTestWebhook = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/PublishTestWebhook',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllSubscriptions'
    abp.services.app.webhookSubscription.getAllSubscriptions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetAllSubscriptions',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubscription'
    abp.services.app.webhookSubscription.getSubscription = function(subscriptionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetSubscription' + abp.utils.buildQueryString([{ name: 'subscriptionId', value: subscriptionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addSubscription'
    abp.services.app.webhookSubscription.addSubscription = function(subscription, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/AddSubscription',
        type: 'POST',
        data: JSON.stringify(subscription)
      }, ajaxParams));;
    };

    // action 'updateSubscription'
    abp.services.app.webhookSubscription.updateSubscription = function(subscription, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/UpdateSubscription',
        type: 'PUT',
        data: JSON.stringify(subscription)
      }, ajaxParams));;
    };

    // action 'activateWebhookSubscription'
    abp.services.app.webhookSubscription.activateWebhookSubscription = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/ActivateWebhookSubscription',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'isSubscribed'
    abp.services.app.webhookSubscription.isSubscribed = function(webhookName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/IsSubscribed' + abp.utils.buildQueryString([{ name: 'webhookName', value: webhookName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllSubscriptionsIfFeaturesGranted'
    abp.services.app.webhookSubscription.getAllSubscriptionsIfFeaturesGranted = function(webhookName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetAllSubscriptionsIfFeaturesGranted' + abp.utils.buildQueryString([{ name: 'webhookName', value: webhookName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAvailableWebhooks'
    abp.services.app.webhookSubscription.getAllAvailableWebhooks = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetAllAvailableWebhooks',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'timing'
  (function(){

    abp.services.app.timing = abp.services.app.timing || {};

    // action 'getTimezones'
    abp.services.app.timing.getTimezones = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timing/GetTimezones' + abp.utils.buildQueryString([{ name: 'defaultTimezoneScope', value: input.defaultTimezoneScope }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimezoneComboboxItems'
    abp.services.app.timing.getTimezoneComboboxItems = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timing/GetTimezoneComboboxItems' + abp.utils.buildQueryString([{ name: 'selectedTimezoneId', value: input.selectedTimezoneId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'tenantDashboard'
  (function(){

    abp.services.app.tenantDashboard = abp.services.app.tenantDashboard || {};

    // action 'getMemberActivity'
    abp.services.app.tenantDashboard.getMemberActivity = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetMemberActivity',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDashboardData'
    abp.services.app.tenantDashboard.getDashboardData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetDashboardData' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTopStats'
    abp.services.app.tenantDashboard.getTopStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetTopStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfitShare'
    abp.services.app.tenantDashboard.getProfitShare = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetProfitShare',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDailySales'
    abp.services.app.tenantDashboard.getDailySales = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetDailySales',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSalesSummary'
    abp.services.app.tenantDashboard.getSalesSummary = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetSalesSummary' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionalStats'
    abp.services.app.tenantDashboard.getRegionalStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetRegionalStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeneralStats'
    abp.services.app.tenantDashboard.getGeneralStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetGeneralStats',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'anocuments'
  (function(){

    abp.services.app.anocuments = abp.services.app.anocuments || {};

    // action 'getAll'
    abp.services.app.anocuments.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arSubjectFilter', value: input.arSubjectFilter }, { name: 'enSubjectFilter', value: input.enSubjectFilter }, { name: 'arDescriptionFilter', value: input.arDescriptionFilter }, { name: 'enDescriptionFilter', value: input.enDescriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'arAttachmentIdFilter', value: input.arAttachmentIdFilter }, { name: 'enAttachmentIdFilter', value: input.enAttachmentIdFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAnocumentForView'
    abp.services.app.anocuments.getAnocumentForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/GetAnocumentForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAnocumentForEdit'
    abp.services.app.anocuments.getAnocumentForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/GetAnocumentForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.anocuments.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.anocuments['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAnocumentsToExcel'
    abp.services.app.anocuments.getAnocumentsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/GetAnocumentsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arSubjectFilter', value: input.arSubjectFilter }, { name: 'enSubjectFilter', value: input.enSubjectFilter }, { name: 'arDescriptionFilter', value: input.arDescriptionFilter }, { name: 'enDescriptionFilter', value: input.enDescriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'arAttachmentIdFilter', value: input.arAttachmentIdFilter }, { name: 'enAttachmentIdFilter', value: input.enAttachmentIdFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.anocuments.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.anocuments.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Anocuments/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'billers'
  (function(){

    abp.services.app.billers = abp.services.app.billers || {};

    // action 'getAll'
    abp.services.app.billers.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'enShortNameFilter', value: input.enShortNameFilter }, { name: 'arShortNameFilter', value: input.arShortNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'websiteFilter', value: input.websiteFilter }, { name: 'stmtBankCodeFilter', value: input.stmtBankCodeFilter }, { name: 'applicationIdFilter', value: input.applicationIdFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'logoIdFilter', value: input.logoIdFilter }, { name: 'billerCategoryNameFilter', value: input.billerCategoryNameFilter }, { name: 'integrationTypeNameFilter', value: input.integrationTypeNameFilter }, { name: 'notificationsSettingIdFilter', value: input.notificationsSettingIdFilter }, { name: 'cMSConfigurationIdFilter', value: input.cMSConfigurationIdFilter }, { name: 'paymentGatewayConfigurationIdFilter', value: input.paymentGatewayConfigurationIdFilter }, { name: 'notificationsProfileIdFilter', value: input.notificationsProfileIdFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'parentId', value: input.parentId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerForView'
    abp.services.app.billers.getBillerForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillerForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerByCode'
    abp.services.app.billers.getBillerByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillerByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerForEdit'
    abp.services.app.billers.getBillerForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillerForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billers.createOrEdit = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/CreateOrEdit' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billers['delete'] = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBillersToExcel'
    abp.services.app.billers.getBillersToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillersToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'enShortNameFilter', value: input.enShortNameFilter }, { name: 'arShortNameFilter', value: input.arShortNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'websiteFilter', value: input.websiteFilter }, { name: 'stmtBankCodeFilter', value: input.stmtBankCodeFilter }, { name: 'applicationIdFilter', value: input.applicationIdFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'logoIdFilter', value: input.logoIdFilter }, { name: 'billerCategoryNameFilter', value: input.billerCategoryNameFilter }, { name: 'integrationTypeNameFilter', value: input.integrationTypeNameFilter }, { name: 'notificationsSettingIdFilter', value: input.notificationsSettingIdFilter }, { name: 'notificationsProfileIdFilter', value: input.notificationsProfileIdFilter }, { name: 'cMSConfigurationIdFilter', value: input.cMSConfigurationIdFilter }, { name: 'paymentGatewayConfigurationIdFilter', value: input.paymentGatewayConfigurationIdFilter }, { name: 'parentId', value: input.parentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerCategoryForTableDropdown'
    abp.services.app.billers.getAllBillerCategoryForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAllBillerCategoryForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllIntegrationTypeForTableDropdown'
    abp.services.app.billers.getAllIntegrationTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAllIntegrationTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllCMSConfigurationForTableDropdown'
    abp.services.app.billers.getAllCMSConfigurationForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAllCMSConfigurationForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentGatewayConfigurationForTableDropdown'
    abp.services.app.billers.getAllPaymentGatewayConfigurationForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAllPaymentGatewayConfigurationForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotificationsSettingForTableDropdown'
    abp.services.app.billers.getAllNotificationsSettingForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAllNotificationsSettingForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotificationsProfileForTableDropdown'
    abp.services.app.billers.getAllNotificationsProfileForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetAllNotificationsProfileForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.billers.chanageStatus = function(id, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'generateAuthorizationKey'
    abp.services.app.billers.generateAuthorizationKey = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GenerateAuthorizationKey' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'processBillerActions'
    abp.services.app.billers.processBillerActions = function(requestJSON, actionTypeCode, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/ProcessBillerActions' + abp.utils.buildQueryString([{ name: 'requestJSON', value: requestJSON }, { name: 'actionTypeCode', value: actionTypeCode }, { name: 'entityId', value: entityId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getBillersForTableDropdown'
    abp.services.app.billers.getBillersForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillersForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerByApplicationId'
    abp.services.app.billers.getBillerByApplicationId = function(appId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillerByApplicationId' + abp.utils.buildQueryString([{ name: 'appId', value: appId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerById'
    abp.services.app.billers.getBillerById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Billers/GetBillerById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'billerServices'
  (function(){

    abp.services.app.billerServices = abp.services.app.billerServices || {};

    // action 'getAll'
    abp.services.app.billerServices.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arShortDescriptionFilter', value: input.arShortDescriptionFilter }, { name: 'enShortDescriptionFilter', value: input.enShortDescriptionFilter }, { name: 'enDescriptionFilter', value: input.enDescriptionFilter }, { name: 'arDescriptionFilter', value: input.arDescriptionFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'feesOnBillerFilter', value: input.feesOnBillerFilter }, { name: 'maxMinDueAmountFilter', value: input.maxMinDueAmountFilter }, { name: 'minMinDueAmountFilter', value: input.minMinDueAmountFilter }, { name: 'maxMaxDueAmountFilter', value: input.maxMaxDueAmountFilter }, { name: 'minMaxDueAmountFilter', value: input.minMaxDueAmountFilter }, { name: 'billingNumberRequiredFilter', value: input.billingNumberRequiredFilter }, { name: 'billerPrepaidValidationRequiredFilter', value: input.billerPrepaidValidationRequiredFilter }, { name: 'allowPartFilter', value: input.allowPartFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'paymentTypeNameFilter', value: input.paymentTypeNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'subBillerId', value: input.subBillerId }, { name: 'parentId', value: input.parentId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMyBillerServices'
    abp.services.app.billerServices.getMyBillerServices = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetMyBillerServices' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arShortDescriptionFilter', value: input.arShortDescriptionFilter }, { name: 'enShortDescriptionFilter', value: input.enShortDescriptionFilter }, { name: 'enDescriptionFilter', value: input.enDescriptionFilter }, { name: 'arDescriptionFilter', value: input.arDescriptionFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'feesOnBillerFilter', value: input.feesOnBillerFilter }, { name: 'maxMinDueAmountFilter', value: input.maxMinDueAmountFilter }, { name: 'minMinDueAmountFilter', value: input.minMinDueAmountFilter }, { name: 'maxMaxDueAmountFilter', value: input.maxMaxDueAmountFilter }, { name: 'minMaxDueAmountFilter', value: input.minMaxDueAmountFilter }, { name: 'billingNumberRequiredFilter', value: input.billingNumberRequiredFilter }, { name: 'billerPrepaidValidationRequiredFilter', value: input.billerPrepaidValidationRequiredFilter }, { name: 'allowPartFilter', value: input.allowPartFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'paymentTypeNameFilter', value: input.paymentTypeNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerServiceForView'
    abp.services.app.billerServices.getBillerServiceForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetBillerServiceForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerServiceForEdit'
    abp.services.app.billerServices.getBillerServiceForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetBillerServiceForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billerServices.createOrEdit = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/CreateOrEdit' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getBillerServiceById'
    abp.services.app.billerServices.getBillerServiceById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetBillerServiceById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billerServices['delete'] = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBillerServicesToExcel'
    abp.services.app.billerServices.getBillerServicesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetBillerServicesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arShortDescriptionFilter', value: input.arShortDescriptionFilter }, { name: 'enShortDescriptionFilter', value: input.enShortDescriptionFilter }, { name: 'enDescriptionFilter', value: input.enDescriptionFilter }, { name: 'arDescriptionFilter', value: input.arDescriptionFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'feesOnBillerFilter', value: input.feesOnBillerFilter }, { name: 'maxFeesFilter', value: input.maxFeesFilter }, { name: 'minFeesFilter', value: input.minFeesFilter }, { name: 'maxMinDueAmountFilter', value: input.maxMinDueAmountFilter }, { name: 'minMinDueAmountFilter', value: input.minMinDueAmountFilter }, { name: 'maxMaxDueAmountFilter', value: input.maxMaxDueAmountFilter }, { name: 'minMaxDueAmountFilter', value: input.minMaxDueAmountFilter }, { name: 'billingNumberRequiredFilter', value: input.billingNumberRequiredFilter }, { name: 'billerPrepaidValidationRequiredFilter', value: input.billerPrepaidValidationRequiredFilter }, { name: 'allowPartFilter', value: input.allowPartFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'paymentTypeNameFilter', value: input.paymentTypeNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'subBillerId', value: input.subBillerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentTypeForTableDropdown'
    abp.services.app.billerServices.getAllPaymentTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllPaymentTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.billerServices.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllParentBillerForTableDropdown'
    abp.services.app.billerServices.getAllParentBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllParentBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServicesForTableDropdown'
    abp.services.app.billerServices.getAllBillerServicesForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllBillerServicesForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServicesForTableDropdownByBillerId'
    abp.services.app.billerServices.getAllBillerServicesForTableDropdownByBillerId = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllBillerServicesForTableDropdownByBillerId' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllFeesTypeForTableDropdown'
    abp.services.app.billerServices.getAllFeesTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllFeesTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPluginConfigurationTableDropdown'
    abp.services.app.billerServices.getAllPluginConfigurationTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllPluginConfigurationTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServicesTableDropdown'
    abp.services.app.billerServices.getAllBillerServicesTableDropdown = function(billerServiceId, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllBillerServicesTableDropdown' + abp.utils.buildQueryString([{ name: 'billerServiceId', value: billerServiceId }, { name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.billerServices.chanageStatus = function(id, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'processBillerServicesActions'
    abp.services.app.billerServices.processBillerServicesActions = function(requestJSON, actionTypeCode, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/ProcessBillerServicesActions' + abp.utils.buildQueryString([{ name: 'requestJSON', value: requestJSON }, { name: 'actionTypeCode', value: actionTypeCode }, { name: 'entityId', value: entityId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllAssignBillerServices'
    abp.services.app.billerServices.getAllAssignBillerServices = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAllAssignBillerServices' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arShortDescriptionFilter', value: input.arShortDescriptionFilter }, { name: 'enShortDescriptionFilter', value: input.enShortDescriptionFilter }, { name: 'enDescriptionFilter', value: input.enDescriptionFilter }, { name: 'arDescriptionFilter', value: input.arDescriptionFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'feesOnBillerFilter', value: input.feesOnBillerFilter }, { name: 'maxMinDueAmountFilter', value: input.maxMinDueAmountFilter }, { name: 'minMinDueAmountFilter', value: input.minMinDueAmountFilter }, { name: 'maxMaxDueAmountFilter', value: input.maxMaxDueAmountFilter }, { name: 'minMaxDueAmountFilter', value: input.minMaxDueAmountFilter }, { name: 'billingNumberRequiredFilter', value: input.billingNumberRequiredFilter }, { name: 'billerPrepaidValidationRequiredFilter', value: input.billerPrepaidValidationRequiredFilter }, { name: 'allowPartFilter', value: input.allowPartFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'paymentTypeNameFilter', value: input.paymentTypeNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'subBillerId', value: input.subBillerId }, { name: 'parentId', value: input.parentId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssignBillerServiceForEdit'
    abp.services.app.billerServices.getAssignBillerServiceForEdit = function(input, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/GetAssignBillerServiceForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'billerServiceListId'
    abp.services.app.billerServices.billerServiceListId = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/BillerServiceListId' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'createOrEditAssginBillerService'
    abp.services.app.billerServices.createOrEditAssginBillerService = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/CreateOrEditAssginBillerService' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'processAssignBillerServicesActions'
    abp.services.app.billerServices.processAssignBillerServicesActions = function(requestJSON, actionTypeCode, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerServices/ProcessAssignBillerServicesActions' + abp.utils.buildQueryString([{ name: 'requestJSON', value: requestJSON }, { name: 'actionTypeCode', value: actionTypeCode }, { name: 'entityId', value: entityId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'billInquiries'
  (function(){

    abp.services.app.billInquiries = abp.services.app.billInquiries || {};

    // action 'getAll'
    abp.services.app.billInquiries.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'inqRefNoFilter', value: input.inqRefNoFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }, { name: 'billId', value: input.billId }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillInquiryForView'
    abp.services.app.billInquiries.getBillInquiryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetBillInquiryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillInquiryByBillingNumber'
    abp.services.app.billInquiries.getBillInquiryByBillingNumber = function(billingNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetBillInquiryByBillingNumber' + abp.utils.buildQueryString([{ name: 'billingNumber', value: billingNumber }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillInquiryForEdit'
    abp.services.app.billInquiries.getBillInquiryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetBillInquiryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billInquiries.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billInquiries['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBillInquiriesToExcel'
    abp.services.app.billInquiries.getBillInquiriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetBillInquiriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'inqRefNoFilter', value: input.inqRefNoFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }, { name: 'billId', value: input.billId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServiceForTableDropdown'
    abp.services.app.billInquiries.getAllBillerServiceForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetAllBillerServiceForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateBillInquiryDetails'
    abp.services.app.billInquiries.updateBillInquiryDetails = function(checkOutId, paymentAccountNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/UpdateBillInquiryDetails' + abp.utils.buildQueryString([{ name: 'checkOutId', value: checkOutId }, { name: 'paymentAccountNumber', value: paymentAccountNumber }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'billInquiry'
    abp.services.app.billInquiries.billInquiry = function(input, lang, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/BillInquiry' + abp.utils.buildQueryString([{ name: 'lang', value: lang }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'billInquiryWeb'
    abp.services.app.billInquiries.billInquiryWeb = function(input, lang, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/BillInquiryWeb' + abp.utils.buildQueryString([{ name: 'lang', value: lang }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'billInquiryForUnPaidBills'
    abp.services.app.billInquiries.billInquiryForUnPaidBills = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/BillInquiryForUnPaidBills',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getInquiryByCheckoutId'
    abp.services.app.billInquiries.getInquiryByCheckoutId = function(checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetInquiryByCheckoutId' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkout'
    abp.services.app.billInquiries.checkout = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/Checkout',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'checkoutWeb'
    abp.services.app.billInquiries.checkoutWeb = function(inquiryRef, amount, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/CheckoutWeb' + abp.utils.buildQueryString([{ name: 'inquiryRef', value: inquiryRef }, { name: 'amount', value: amount }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'checkoutRequest'
    abp.services.app.billInquiries.checkoutRequest = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/CheckoutRequest',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'prepareBillInquiry'
    abp.services.app.billInquiries.prepareBillInquiry = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/PrepareBillInquiry',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'getPaymentStatus'
    abp.services.app.billInquiries.getPaymentStatus = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetPaymentStatus' + abp.utils.buildQueryString([{ name: 'paymentGatewayConfigurationId', value: dto.paymentGatewayConfigurationId }, { name: 'checkoutId', value: dto.checkoutId }, { name: 'isInternational', value: dto.isInternational }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillPaymentStatus'
    abp.services.app.billInquiries.getBillPaymentStatus = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/GetBillPaymentStatus' + abp.utils.buildQueryString([{ name: 'authorizationKey', value: dto.authorizationKey }, { name: 'pluginConfigurationId', value: dto.pluginConfigurationId }, { name: 'checkoutId', value: dto.checkoutId }, { name: 'billerCode', value: dto.billerCode }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'searchPaymentTransaction'
    abp.services.app.billInquiries.searchPaymentTransaction = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/SearchPaymentTransaction',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'ePOSBillInquiry'
    abp.services.app.billInquiries.ePOSBillInquiry = function(checkoutId, billingNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/EPOSBillInquiry' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }, { name: 'billingNumber', value: billingNumber }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'calculateFees'
    abp.services.app.billInquiries.calculateFees = function(billerServiceId, amount, isInternationalFees, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/CalculateFees' + abp.utils.buildQueryString([{ name: 'billerServiceId', value: billerServiceId }, { name: 'amount', value: amount }, { name: 'isInternationalFees', value: isInternationalFees }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'isOrderIdExist'
    abp.services.app.billInquiries.isOrderIdExist = function(orderId, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillInquiries/IsOrderIdExist' + abp.utils.buildQueryString([{ name: 'orderId', value: orderId }, { name: 'billerId', value: billerId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'bills'
  (function(){

    abp.services.app.bills = abp.services.app.bills || {};

    // action 'getAll'
    abp.services.app.bills.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxDueDateFilter', value: input.maxDueDateFilter }, { name: 'minDueDateFilter', value: input.minDueDateFilter }, { name: 'maxIssueDateFilter', value: input.maxIssueDateFilter }, { name: 'minIssueDateFilter', value: input.minIssueDateFilter }, { name: 'maxOpenDateFilter', value: input.maxOpenDateFilter }, { name: 'minOpenDateFilter', value: input.minOpenDateFilter }, { name: 'maxCloseDateFilter', value: input.maxCloseDateFilter }, { name: 'minCloseDateFilter', value: input.minCloseDateFilter }, { name: 'maxExpiryDateFilter', value: input.maxExpiryDateFilter }, { name: 'minExpiryDateFilter', value: input.minExpiryDateFilter }, { name: 'maxSTMTDateFilter', value: input.maxSTMTDateFilter }, { name: 'minSTMTDateFilter', value: input.minSTMTDateFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'maxDueAmtFilter', value: input.maxDueAmtFilter }, { name: 'minDueAmtFilter', value: input.minDueAmtFilter }, { name: 'maxPaidAmtFilter', value: input.maxPaidAmtFilter }, { name: 'minPaidAmtFilter', value: input.minPaidAmtFilter }, { name: 'refNoFilter', value: input.refNoFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'isOverrideFilter', value: input.isOverrideFilter }, { name: 'maxVersionFilter', value: input.maxVersionFilter }, { name: 'minVersionFilter', value: input.minVersionFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }, { name: 'billStatutsNameFilter', value: input.billStatutsNameFilter }, { name: 'billTypeNameFilter', value: input.billTypeNameFilter }, { name: 'customerProfileCustomerNameFilter', value: input.customerProfileCustomerNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'customerId', value: input.customerId }, { name: 'billingNumber', value: input.billingNumber }, { name: 'isAllVersion', value: input.isAllVersion }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isPaging', value: input.isPaging }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllForMobile'
    abp.services.app.bills.getAllForMobile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllForMobile' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxDueDateFilter', value: input.maxDueDateFilter }, { name: 'minDueDateFilter', value: input.minDueDateFilter }, { name: 'maxIssueDateFilter', value: input.maxIssueDateFilter }, { name: 'minIssueDateFilter', value: input.minIssueDateFilter }, { name: 'maxOpenDateFilter', value: input.maxOpenDateFilter }, { name: 'minOpenDateFilter', value: input.minOpenDateFilter }, { name: 'maxCloseDateFilter', value: input.maxCloseDateFilter }, { name: 'minCloseDateFilter', value: input.minCloseDateFilter }, { name: 'maxExpiryDateFilter', value: input.maxExpiryDateFilter }, { name: 'minExpiryDateFilter', value: input.minExpiryDateFilter }, { name: 'maxSTMTDateFilter', value: input.maxSTMTDateFilter }, { name: 'minSTMTDateFilter', value: input.minSTMTDateFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'maxDueAmtFilter', value: input.maxDueAmtFilter }, { name: 'minDueAmtFilter', value: input.minDueAmtFilter }, { name: 'maxPaidAmtFilter', value: input.maxPaidAmtFilter }, { name: 'minPaidAmtFilter', value: input.minPaidAmtFilter }, { name: 'refNoFilter', value: input.refNoFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'isOverrideFilter', value: input.isOverrideFilter }, { name: 'maxVersionFilter', value: input.maxVersionFilter }, { name: 'minVersionFilter', value: input.minVersionFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }, { name: 'billStatutsNameFilter', value: input.billStatutsNameFilter }, { name: 'billTypeNameFilter', value: input.billTypeNameFilter }, { name: 'customerProfileCustomerNameFilter', value: input.customerProfileCustomerNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'customerId', value: input.customerId }, { name: 'billingNumber', value: input.billingNumber }, { name: 'isAllVersion', value: input.isAllVersion }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isPaging', value: input.isPaging }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerBills'
    abp.services.app.bills.getCustomerBills = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetCustomerBills' + abp.utils.buildQueryString([{ name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'billerServiceIdFilter', value: input.billerServiceIdFilter }, { name: 'billStatusIdFilter', value: input.billStatusIdFilter }, { name: 'creationDateFilter', value: input.creationDateFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillForView'
    abp.services.app.bills.getBillForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetBillForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillForEdit'
    abp.services.app.bills.getBillForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetBillForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillById'
    abp.services.app.bills.getBillById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetBillById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillByDto'
    abp.services.app.bills.getBillByDto = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetBillByDto' + abp.utils.buildQueryString([{ name: 'billingNumber', value: input.billingNumber }, { name: 'billerCode', value: input.billerCode }, { name: 'serviceCode', value: input.serviceCode }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bills.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bills['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'updateBillStatus'
    abp.services.app.bills.updateBillStatus = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/UpdateBillStatus',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getBillsToExcel'
    abp.services.app.bills.getBillsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetBillsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxDueDateFilter', value: input.maxDueDateFilter }, { name: 'minDueDateFilter', value: input.minDueDateFilter }, { name: 'maxIssueDateFilter', value: input.maxIssueDateFilter }, { name: 'minIssueDateFilter', value: input.minIssueDateFilter }, { name: 'maxOpenDateFilter', value: input.maxOpenDateFilter }, { name: 'minOpenDateFilter', value: input.minOpenDateFilter }, { name: 'maxCloseDateFilter', value: input.maxCloseDateFilter }, { name: 'minCloseDateFilter', value: input.minCloseDateFilter }, { name: 'maxExpiryDateFilter', value: input.maxExpiryDateFilter }, { name: 'minExpiryDateFilter', value: input.minExpiryDateFilter }, { name: 'maxSTMTDateFilter', value: input.maxSTMTDateFilter }, { name: 'minSTMTDateFilter', value: input.minSTMTDateFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'maxDueAmtFilter', value: input.maxDueAmtFilter }, { name: 'minDueAmtFilter', value: input.minDueAmtFilter }, { name: 'maxPaidAmtFilter', value: input.maxPaidAmtFilter }, { name: 'minPaidAmtFilter', value: input.minPaidAmtFilter }, { name: 'refNoFilter', value: input.refNoFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'isOverrideFilter', value: input.isOverrideFilter }, { name: 'maxVersionFilter', value: input.maxVersionFilter }, { name: 'minVersionFilter', value: input.minVersionFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }, { name: 'billStatutsNameFilter', value: input.billStatutsNameFilter }, { name: 'billTypeNameFilter', value: input.billTypeNameFilter }, { name: 'customerProfileCustomerNameFilter', value: input.customerProfileCustomerNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'billingNumber', value: input.billingNumber }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAccessChannelForTableDropdown'
    abp.services.app.bills.getAllAccessChannelForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllAccessChannelForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.bills.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServiceForTableDropdown'
    abp.services.app.bills.getAllBillerServiceForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllBillerServiceForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillStatutsForTableDropdown'
    abp.services.app.bills.getAllBillStatutsForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllBillStatutsForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillTypeForTableDropdown'
    abp.services.app.bills.getAllBillTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllBillTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllCustomerProfileForTableDropdown'
    abp.services.app.bills.getAllCustomerProfileForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllCustomerProfileForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllIdTypeForTableDropdown'
    abp.services.app.bills.getAllIdTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllIdTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentMethodForTableDropdown'
    abp.services.app.bills.getAllPaymentMethodForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllPaymentMethodForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnPaidBills'
    abp.services.app.bills.getUnPaidBills = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetUnPaidBills' + abp.utils.buildQueryString([{ name: 'billNo', value: request.billNo }, { name: 'billingNo', value: request.billingNo }, { name: 'billerId', value: request.billerId }, { name: 'billerServiceId', value: request.billerServiceId }, { name: 'parentId', value: request.parentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'validateBill'
    abp.services.app.bills.validateBill = function(billerCode, serviceCode, authorizationKey, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/ValidateBill' + abp.utils.buildQueryString([{ name: 'billerCode', value: billerCode }, { name: 'serviceCode', value: serviceCode }, { name: 'authorizationKey', value: authorizationKey }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'isBillingNoExsist'
    abp.services.app.bills.isBillingNoExsist = function(billingNo, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/IsBillingNoExsist' + abp.utils.buildQueryString([{ name: 'billingNo', value: billingNo }, { name: 'billerId', value: billerId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllRegionForTableDropdown'
    abp.services.app.bills.getAllRegionForTableDropdown = function(geoLocationId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllRegionForTableDropdown' + abp.utils.buildQueryString([{ name: 'geoLocationId', value: geoLocationId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllRegionForTableDropdownId'
    abp.services.app.bills.getAllRegionForTableDropdownId = function(geoLocationId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllRegionForTableDropdownId' + abp.utils.buildQueryString([{ name: 'geoLocationId', value: geoLocationId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSectorForTableDropdown'
    abp.services.app.bills.getAllSectorForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bills/GetAllSectorForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'billTemps'
  (function(){

    abp.services.app.billTemps = abp.services.app.billTemps || {};

    // action 'getAll'
    abp.services.app.billTemps.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTemps/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'dueDateFilter', value: input.dueDateFilter }, { name: 'issueDateFilter', value: input.issueDateFilter }, { name: 'openDateFilter', value: input.openDateFilter }, { name: 'closeDateFilter', value: input.closeDateFilter }, { name: 'expiryDateFilter', value: input.expiryDateFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'dueAmtFilter', value: input.dueAmtFilter }, { name: 'paidAmtFilter', value: input.paidAmtFilter }, { name: 'refNoFilter', value: input.refNoFilter }, { name: 'feesAmtFilter', value: input.feesAmtFilter }, { name: 'additionalFeesFilter', value: input.additionalFeesFilter }, { name: 'serviceCodeFilter', value: input.serviceCodeFilter }, { name: 'billStatusFilter', value: input.billStatusFilter }, { name: 'billTypeFilter', value: input.billTypeFilter }, { name: 'isAllowPartFilter', value: input.isAllowPartFilter }, { name: 'isFeesonBillerFilter', value: input.isFeesonBillerFilter }, { name: 'setBnkCodeFilter', value: input.setBnkCodeFilter }, { name: 'additionalFieldsFilter', value: input.additionalFieldsFilter }, { name: 'isValidFilter', value: input.isValidFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'recordNumberFilter', value: input.recordNumberFilter }, { name: 'maxCreationDateFilter', value: input.maxCreationDateFilter }, { name: 'minCreationDateFilter', value: input.minCreationDateFilter }, { name: 'isUpdateFilter', value: input.isUpdateFilter }, { name: 'maxBillTypeIdFilter', value: input.maxBillTypeIdFilter }, { name: 'minBillTypeIdFilter', value: input.minBillTypeIdFilter }, { name: 'maxBillerServiceIdFilter', value: input.maxBillerServiceIdFilter }, { name: 'minBillerServiceIdFilter', value: input.minBillerServiceIdFilter }, { name: 'maxBillStatutsIdFilter', value: input.maxBillStatutsIdFilter }, { name: 'minBillStatutsIdFilter', value: input.minBillStatutsIdFilter }, { name: 'maxFileIdFilter', value: input.maxFileIdFilter }, { name: 'minFileIdFilter', value: input.minFileIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillTempForView'
    abp.services.app.billTemps.getBillTempForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTemps/GetBillTempForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillTempForEdit'
    abp.services.app.billTemps.getBillTempForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTemps/GetBillTempForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billTemps.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTemps/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billTemps['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTemps/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'complains'
  (function(){

    abp.services.app.complains = abp.services.app.complains || {};

    // action 'getAll'
    abp.services.app.complains.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Complains/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'usernameFilter', value: input.usernameFilter }, { name: 'billingNumberFilterId', value: input.billingNumberFilterId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getComplainForView'
    abp.services.app.complains.getComplainForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Complains/GetComplainForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getComplainForEdit'
    abp.services.app.complains.getComplainForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Complains/GetComplainForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.complains.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Complains/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.complains['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Complains/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getComplainsToExcel'
    abp.services.app.complains.getComplainsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Complains/GetComplainsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'usernameFilter', value: input.usernameFilter }, { name: 'billingNumberFilterId', value: input.billingNumberFilterId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'customerAccounts'
  (function(){

    abp.services.app.customerAccounts = abp.services.app.customerAccounts || {};

    // action 'getAll'
    abp.services.app.customerAccounts.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'nickNameFilter', value: input.nickNameFilter }, { name: 'customerProfileCustomerNameFilter', value: input.customerProfileCustomerNameFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }, { name: 'customerId', value: input.customerId }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerAccountForView'
    abp.services.app.customerAccounts.getCustomerAccountForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetCustomerAccountForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerAccountForEdit'
    abp.services.app.customerAccounts.getCustomerAccountForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetCustomerAccountForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerAccountByBillNumber'
    abp.services.app.customerAccounts.getCustomerAccountByBillNumber = function(billingNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetCustomerAccountByBillNumber' + abp.utils.buildQueryString([{ name: 'billingNumber', value: billingNumber }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.customerAccounts.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.customerAccounts['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCustomerAccountsToExcel'
    abp.services.app.customerAccounts.getCustomerAccountsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetCustomerAccountsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'nickNameFilter', value: input.nickNameFilter }, { name: 'customerProfileCustomerNameFilter', value: input.customerProfileCustomerNameFilter }, { name: 'billerServiceNameFilter', value: input.billerServiceNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllCustomerProfileForTableDropdown'
    abp.services.app.customerAccounts.getAllCustomerProfileForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetAllCustomerProfileForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServiceForTableDropdown'
    abp.services.app.customerAccounts.getAllBillerServiceForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetAllBillerServiceForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addNewBill'
    abp.services.app.customerAccounts.addNewBill = function(input, userId, customerProfileId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/AddNewBill' + abp.utils.buildQueryString([{ name: 'userId', value: userId }, { name: 'customerProfileId', value: customerProfileId }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'isCustomerProfileLinked'
    abp.services.app.customerAccounts.isCustomerProfileLinked = function(billingNo, billerServiceId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/IsCustomerProfileLinked' + abp.utils.buildQueryString([{ name: 'billingNo', value: billingNo }, { name: 'billerServiceId', value: billerServiceId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getCustomerAccountByCustomerProfileId'
    abp.services.app.customerAccounts.getCustomerAccountByCustomerProfileId = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/GetCustomerAccountByCustomerProfileId' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteCustomerAccountsByCustomerProfileId'
    abp.services.app.customerAccounts.deleteCustomerAccountsByCustomerProfileId = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerAccounts/DeleteCustomerAccountsByCustomerProfileId' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'customerProfiles'
  (function(){

    abp.services.app.customerProfiles = abp.services.app.customerProfiles || {};

    // action 'getAll'
    abp.services.app.customerProfiles.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'idNumberFilter', value: input.idNumberFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'countryNameFilter', value: input.countryNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerProfileForView'
    abp.services.app.customerProfiles.getCustomerProfileForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/GetCustomerProfileForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerProfileForEdit'
    abp.services.app.customerProfiles.getCustomerProfileForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/GetCustomerProfileForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.customerProfiles.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.customerProfiles['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCustomerProfilesToExcel'
    abp.services.app.customerProfiles.getCustomerProfilesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/GetCustomerProfilesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'idNumberFilter', value: input.idNumberFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'countryNameFilter', value: input.countryNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllIdTypeForTableDropdown'
    abp.services.app.customerProfiles.getAllIdTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/GetAllIdTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllCountryForTableDropdown'
    abp.services.app.customerProfiles.getAllCountryForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfiles/GetAllCountryForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'customerProfileTemps'
  (function(){

    abp.services.app.customerProfileTemps = abp.services.app.customerProfileTemps || {};

    // action 'getAll'
    abp.services.app.customerProfileTemps.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfileTemps/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'idNumberFilter', value: input.idNumberFilter }, { name: 'idTypeFilter', value: input.idTypeFilter }, { name: 'nationFilter', value: input.nationFilter }, { name: 'isValidFilter', value: input.isValidFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'recordNumberFilter', value: input.recordNumberFilter }, { name: 'maxCreationDateFilter', value: input.maxCreationDateFilter }, { name: 'minCreationDateFilter', value: input.minCreationDateFilter }, { name: 'fileRefFilter', value: input.fileRefFilter }, { name: 'maxNationIdFilter', value: input.maxNationIdFilter }, { name: 'minNationIdFilter', value: input.minNationIdFilter }, { name: 'additionaFieldsFilter', value: input.additionaFieldsFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'maxStatusIdFilter', value: input.maxStatusIdFilter }, { name: 'minStatusIdFilter', value: input.minStatusIdFilter }, { name: 'maxIdTypeIdFilter', value: input.maxIdTypeIdFilter }, { name: 'minIdTypeIdFilter', value: input.minIdTypeIdFilter }, { name: 'isUpdateFilter', value: input.isUpdateFilter }, { name: 'maxFileIdFilter', value: input.maxFileIdFilter }, { name: 'minFileIdFilter', value: input.minFileIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerProfileTempForView'
    abp.services.app.customerProfileTemps.getCustomerProfileTempForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfileTemps/GetCustomerProfileTempForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerProfileTempForEdit'
    abp.services.app.customerProfileTemps.getCustomerProfileTempForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfileTemps/GetCustomerProfileTempForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.customerProfileTemps.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfileTemps/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.customerProfileTemps['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerProfileTemps/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'electricityUsageInfos'
  (function(){

    abp.services.app.electricityUsageInfos = abp.services.app.electricityUsageInfos || {};

    // action 'getAll'
    abp.services.app.electricityUsageInfos.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ElectricityUsageInfos/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'unitsFilter', value: input.unitsFilter }, { name: 'currentTariffFilter', value: input.currentTariffFilter }, { name: 'newTariffFilter', value: input.newTariffFilter }, { name: 'highestAmountListPerMonthAccordingToTariffFilter', value: input.highestAmountListPerMonthAccordingToTariffFilter }, { name: 'highestAmountListPerMonthAccordingToNewTariffFilter', value: input.highestAmountListPerMonthAccordingToNewTariffFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getElectricityUsageInfoForView'
    abp.services.app.electricityUsageInfos.getElectricityUsageInfoForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ElectricityUsageInfos/GetElectricityUsageInfoForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getElectricityUsageInfoForEdit'
    abp.services.app.electricityUsageInfos.getElectricityUsageInfoForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ElectricityUsageInfos/GetElectricityUsageInfoForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.electricityUsageInfos.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ElectricityUsageInfos/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.electricityUsageInfos['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ElectricityUsageInfos/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getElectricityUsageInfosToExcel'
    abp.services.app.electricityUsageInfos.getElectricityUsageInfosToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ElectricityUsageInfos/GetElectricityUsageInfosToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'unitsFilter', value: input.unitsFilter }, { name: 'currentTariffFilter', value: input.currentTariffFilter }, { name: 'newTariffFilter', value: input.newTariffFilter }, { name: 'highestAmountListPerMonthAccordingToTariffFilter', value: input.highestAmountListPerMonthAccordingToTariffFilter }, { name: 'highestAmountListPerMonthAccordingToNewTariffFilter', value: input.highestAmountListPerMonthAccordingToNewTariffFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'externalInstitutions'
  (function(){

    abp.services.app.externalInstitutions = abp.services.app.externalInstitutions || {};

    // action 'getAll'
    abp.services.app.externalInstitutions.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'bankInfoFilter', value: input.bankInfoFilter }, { name: 'chargeFilter', value: input.chargeFilter }, { name: 'billerIdFilter', value: input.billerIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExternalInstitutionForView'
    abp.services.app.externalInstitutions.getExternalInstitutionForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/GetExternalInstitutionForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExternalInstitutionForEdit'
    abp.services.app.externalInstitutions.getExternalInstitutionForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/GetExternalInstitutionForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.externalInstitutions.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.externalInstitutions['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getExternalInstitutionsToExcel'
    abp.services.app.externalInstitutions.getExternalInstitutionsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/GetExternalInstitutionsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'bankInfoFilter', value: input.bankInfoFilter }, { name: 'chargeFilter', value: input.chargeFilter }, { name: 'billerIdFilter', value: input.billerIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.externalInstitutions.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExternalInstitutions/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'fileConfigurations'
  (function(){

    abp.services.app.fileConfigurations = abp.services.app.fileConfigurations || {};

    // action 'getAll'
    abp.services.app.fileConfigurations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'activePathFilter', value: input.activePathFilter }, { name: 'successPathFilter', value: input.successPathFilter }, { name: 'faildPathFilter', value: input.faildPathFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'fileTypeFilter', value: input.fileTypeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileConfigurationForView'
    abp.services.app.fileConfigurations.getFileConfigurationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetFileConfigurationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileConfigurationForEdit'
    abp.services.app.fileConfigurations.getFileConfigurationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetFileConfigurationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.fileConfigurations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.fileConfigurations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFileConfigurationsToExcel'
    abp.services.app.fileConfigurations.getFileConfigurationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetFileConfigurationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'activePathFilter', value: input.activePathFilter }, { name: 'successPathFilter', value: input.successPathFilter }, { name: 'faildPathFilter', value: input.faildPathFilter }, { name: 'fileTypeFilter', value: input.fileTypeFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.fileConfigurations.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllFileTypeForTableDropdown'
    abp.services.app.fileConfigurations.getAllFileTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetAllFileTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getActivePath'
    abp.services.app.fileConfigurations.getActivePath = function(billerId, fileType, serviceId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetActivePath' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }, { name: 'fileType', value: fileType }, { name: 'serviceId', value: serviceId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServicesForTableDropdown'
    abp.services.app.fileConfigurations.getAllBillerServicesForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileConfigurations/GetAllBillerServicesForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'files'
  (function(){

    abp.services.app.files = abp.services.app.files || {};

    // action 'getAll'
    abp.services.app.files.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fileNameFilter', value: input.fileNameFilter }, { name: 'pathFilter', value: input.pathFilter }, { name: 'processedPathFilter', value: input.processedPathFilter }, { name: 'resultPathFilter', value: input.resultPathFilter }, { name: 'maxFileArchiveTypeFilter', value: input.maxFileArchiveTypeFilter }, { name: 'minFileArchiveTypeFilter', value: input.minFileArchiveTypeFilter }, { name: 'maxProcessStatusFilter', value: input.maxProcessStatusFilter }, { name: 'minProcessStatusFilter', value: input.minProcessStatusFilter }, { name: 'maxTotalRecordsFilter', value: input.maxTotalRecordsFilter }, { name: 'minTotalRecordsFilter', value: input.minTotalRecordsFilter }, { name: 'maxTotalNewSuccessFilter', value: input.maxTotalNewSuccessFilter }, { name: 'minTotalNewSuccessFilter', value: input.minTotalNewSuccessFilter }, { name: 'maxTotalUpdateSuccessFilter', value: input.maxTotalUpdateSuccessFilter }, { name: 'minTotalUpdateSuccessFilter', value: input.minTotalUpdateSuccessFilter }, { name: 'maxTotalFailedFilter', value: input.maxTotalFailedFilter }, { name: 'minTotalFailedFilter', value: input.minTotalFailedFilter }, { name: 'maxStartProccessingFilter', value: input.maxStartProccessingFilter }, { name: 'minStartProccessingFilter', value: input.minStartProccessingFilter }, { name: 'maxEndProccessingFilter', value: input.maxEndProccessingFilter }, { name: 'minEndProccessingFilter', value: input.minEndProccessingFilter }, { name: 'maxBranchIdFilter', value: input.maxBranchIdFilter }, { name: 'minBranchIdFilter', value: input.minBranchIdFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isVerifiedFilter', value: input.isVerifiedFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileForView'
    abp.services.app.files.getFileForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetFileForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileForEdit'
    abp.services.app.files.getFileForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetFileForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.files.createOrEdit = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/CreateOrEdit' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getFileById'
    abp.services.app.files.getFileById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetFileById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.files['delete'] = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFilesToExcel'
    abp.services.app.files.getFilesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetFilesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fileNameFilter', value: input.fileNameFilter }, { name: 'pathFilter', value: input.pathFilter }, { name: 'processedPathFilter', value: input.processedPathFilter }, { name: 'resultPathFilter', value: input.resultPathFilter }, { name: 'maxFileArchiveTypeFilter', value: input.maxFileArchiveTypeFilter }, { name: 'minFileArchiveTypeFilter', value: input.minFileArchiveTypeFilter }, { name: 'maxProcessStatusFilter', value: input.maxProcessStatusFilter }, { name: 'minProcessStatusFilter', value: input.minProcessStatusFilter }, { name: 'maxTotalRecordsFilter', value: input.maxTotalRecordsFilter }, { name: 'minTotalRecordsFilter', value: input.minTotalRecordsFilter }, { name: 'maxTotalNewSuccessFilter', value: input.maxTotalNewSuccessFilter }, { name: 'minTotalNewSuccessFilter', value: input.minTotalNewSuccessFilter }, { name: 'maxTotalUpdateSuccessFilter', value: input.maxTotalUpdateSuccessFilter }, { name: 'minTotalUpdateSuccessFilter', value: input.minTotalUpdateSuccessFilter }, { name: 'maxTotalFailedFilter', value: input.maxTotalFailedFilter }, { name: 'minTotalFailedFilter', value: input.minTotalFailedFilter }, { name: 'maxStartProccessingFilter', value: input.maxStartProccessingFilter }, { name: 'minStartProccessingFilter', value: input.minStartProccessingFilter }, { name: 'maxEndProccessingFilter', value: input.maxEndProccessingFilter }, { name: 'minEndProccessingFilter', value: input.minEndProccessingFilter }, { name: 'maxBranchIdFilter', value: input.maxBranchIdFilter }, { name: 'minBranchIdFilter', value: input.minBranchIdFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isVerifiedFilter', value: input.isVerifiedFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilesExcelFormTxt'
    abp.services.app.files.getFilesExcelFormTxt = function(id, type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetFilesExcelFormTxt' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.files.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllFileForTableDropdown'
    abp.services.app.files.getAllFileForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetAllFileForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllFileTypeForTableDropdown'
    abp.services.app.files.getAllFileTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetAllFileTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'processFilesActions'
    abp.services.app.files.processFilesActions = function(requestJSON, actionTypeCode, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/ProcessFilesActions' + abp.utils.buildQueryString([{ name: 'requestJSON', value: requestJSON }, { name: 'actionTypeCode', value: actionTypeCode }, { name: 'entityId', value: entityId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getFileByRef'
    abp.services.app.files.getFileByRef = function(fileRef, signature, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetFileByRef' + abp.utils.buildQueryString([{ name: 'fileRef', value: fileRef }, { name: 'signature', value: signature }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'fileAction'
    abp.services.app.files.fileAction = function(fileId, isApproved, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/FileAction' + abp.utils.buildQueryString([{ name: 'fileId', value: fileId }, { name: 'isApproved', value: isApproved }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllBillerServicesForTableDropdown'
    abp.services.app.files.getAllBillerServicesForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/GetAllBillerServicesForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'fileNameExists'
    abp.services.app.files.fileNameExists = function(fileName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Files/FileNameExists' + abp.utils.buildQueryString([{ name: 'fileName', value: fileName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'hyperpayRequests'
  (function(){

    abp.services.app.hyperpayRequests = abp.services.app.hyperpayRequests || {};

    // action 'getAll'
    abp.services.app.hyperpayRequests.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'uRLFilter', value: input.uRLFilter }, { name: 'hyperpayIdFilter', value: input.hyperpayIdFilter }, { name: 'entityIdFilter', value: input.entityIdFilter }, { name: 'amountFilter', value: input.amountFilter }, { name: 'currencyFilter', value: input.currencyFilter }, { name: 'paymentTypeFilter', value: input.paymentTypeFilter }, { name: 'simulatorXIDFilter', value: input.simulatorXIDFilter }, { name: 'simulatorForceEnrolledFilter', value: input.simulatorForceEnrolledFilter }, { name: 'simulatorVerificationFilter', value: input.simulatorVerificationFilter }, { name: 'simulatorECIFilter', value: input.simulatorECIFilter }, { name: 'merchantInvoiceIdFilter', value: input.merchantInvoiceIdFilter }, { name: 'testModeFilter', value: input.testModeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHyperpayRequestForView'
    abp.services.app.hyperpayRequests.getHyperpayRequestForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/GetHyperpayRequestForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHyperpayRequestForEdit'
    abp.services.app.hyperpayRequests.getHyperpayRequestForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/GetHyperpayRequestForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hyperpayRequests.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hyperpayRequests['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHyperpayRequestsToExcel'
    abp.services.app.hyperpayRequests.getHyperpayRequestsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/GetHyperpayRequestsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'uRLFilter', value: input.uRLFilter }, { name: 'hyperpayIdFilter', value: input.hyperpayIdFilter }, { name: 'entityIdFilter', value: input.entityIdFilter }, { name: 'amountFilter', value: input.amountFilter }, { name: 'currencyFilter', value: input.currencyFilter }, { name: 'paymentTypeFilter', value: input.paymentTypeFilter }, { name: 'simulatorXIDFilter', value: input.simulatorXIDFilter }, { name: 'simulatorForceEnrolledFilter', value: input.simulatorForceEnrolledFilter }, { name: 'simulatorVerificationFilter', value: input.simulatorVerificationFilter }, { name: 'simulatorECIFilter', value: input.simulatorECIFilter }, { name: 'merchantInvoiceIdFilter', value: input.merchantInvoiceIdFilter }, { name: 'testModeFilter', value: input.testModeFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'saveHyperpayRequest'
    abp.services.app.hyperpayRequests.saveHyperpayRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayRequests/SaveHyperpayRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'hyperpayResponses'
  (function(){

    abp.services.app.hyperpayResponses = abp.services.app.hyperpayResponses || {};

    // action 'getAll'
    abp.services.app.hyperpayResponses.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'secureAcsEciFilter', value: input.secureAcsEciFilter }, { name: 'connectorTxID1Filter', value: input.connectorTxID1Filter }, { name: 'authorizationResponseStanFilter', value: input.authorizationResponseStanFilter }, { name: 'connectorIdFilter', value: input.connectorIdFilter }, { name: 'transactionAcquirerSettlementDateFilter', value: input.transactionAcquirerSettlementDateFilter }, { name: 'transactionReceiptFilter', value: input.transactionReceiptFilter }, { name: 'reconciliationIdFilter', value: input.reconciliationIdFilter }, { name: 'transactionAuthorizationCodeFilter', value: input.transactionAuthorizationCodeFilter }, { name: 'sourceOfFundsProvidedCardIssuerFilter', value: input.sourceOfFundsProvidedCardIssuerFilter }, { name: 'responseAcquirerMessageFilter', value: input.responseAcquirerMessageFilter }, { name: 'responseAcquirerCodeFilter', value: input.responseAcquirerCodeFilter }, { name: 'binFilter', value: input.binFilter }, { name: 'binCountryFilter', value: input.binCountryFilter }, { name: 'last4DigitsFilter', value: input.last4DigitsFilter }, { name: 'holderFilter', value: input.holderFilter }, { name: 'expiryMonthFilter', value: input.expiryMonthFilter }, { name: 'expiryYearFilter', value: input.expiryYearFilter }, { name: 'ipFilter', value: input.ipFilter }, { name: 'ipCountryFilter', value: input.ipCountryFilter }, { name: 'sHOPPEREndToEndIdentityFilter', value: input.sHOPPEREndToEndIdentityFilter }, { name: 'cTPEDESCRIPTORTEMPLATEFilter', value: input.cTPEDESCRIPTORTEMPLATEFilter }, { name: 'scoreFilter', value: input.scoreFilter }, { name: 'simulatorEciFilter', value: input.simulatorEciFilter }, { name: 'simulatorForceEnrolledFilter', value: input.simulatorForceEnrolledFilter }, { name: 'simulatorXidFilter', value: input.simulatorXidFilter }, { name: 'simulatorVerificationFilter', value: input.simulatorVerificationFilter }, { name: 'hyperpayIdFilter', value: input.hyperpayIdFilter }, { name: 'paymentTypeFilter', value: input.paymentTypeFilter }, { name: 'paymentBrandFilter', value: input.paymentBrandFilter }, { name: 'descriptorFilter', value: input.descriptorFilter }, { name: 'merchantInvoiceIdFilter', value: input.merchantInvoiceIdFilter }, { name: 'maxHyperpayRequestIdFilter', value: input.maxHyperpayRequestIdFilter }, { name: 'minHyperpayRequestIdFilter', value: input.minHyperpayRequestIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHyperpayResponseForView'
    abp.services.app.hyperpayResponses.getHyperpayResponseForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/GetHyperpayResponseForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHyperpayResponseForEdit'
    abp.services.app.hyperpayResponses.getHyperpayResponseForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/GetHyperpayResponseForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hyperpayResponses.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hyperpayResponses['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHyperpayResponsesToExcel'
    abp.services.app.hyperpayResponses.getHyperpayResponsesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/GetHyperpayResponsesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'secureAcsEciFilter', value: input.secureAcsEciFilter }, { name: 'connectorTxID1Filter', value: input.connectorTxID1Filter }, { name: 'authorizationResponseStanFilter', value: input.authorizationResponseStanFilter }, { name: 'connectorIdFilter', value: input.connectorIdFilter }, { name: 'transactionAcquirerSettlementDateFilter', value: input.transactionAcquirerSettlementDateFilter }, { name: 'transactionReceiptFilter', value: input.transactionReceiptFilter }, { name: 'reconciliationIdFilter', value: input.reconciliationIdFilter }, { name: 'transactionAuthorizationCodeFilter', value: input.transactionAuthorizationCodeFilter }, { name: 'sourceOfFundsProvidedCardIssuerFilter', value: input.sourceOfFundsProvidedCardIssuerFilter }, { name: 'responseAcquirerMessageFilter', value: input.responseAcquirerMessageFilter }, { name: 'responseAcquirerCodeFilter', value: input.responseAcquirerCodeFilter }, { name: 'binFilter', value: input.binFilter }, { name: 'binCountryFilter', value: input.binCountryFilter }, { name: 'last4DigitsFilter', value: input.last4DigitsFilter }, { name: 'holderFilter', value: input.holderFilter }, { name: 'expiryMonthFilter', value: input.expiryMonthFilter }, { name: 'expiryYearFilter', value: input.expiryYearFilter }, { name: 'ipFilter', value: input.ipFilter }, { name: 'ipCountryFilter', value: input.ipCountryFilter }, { name: 'sHOPPEREndToEndIdentityFilter', value: input.sHOPPEREndToEndIdentityFilter }, { name: 'cTPEDESCRIPTORTEMPLATEFilter', value: input.cTPEDESCRIPTORTEMPLATEFilter }, { name: 'scoreFilter', value: input.scoreFilter }, { name: 'simulatorEciFilter', value: input.simulatorEciFilter }, { name: 'simulatorForceEnrolledFilter', value: input.simulatorForceEnrolledFilter }, { name: 'simulatorXidFilter', value: input.simulatorXidFilter }, { name: 'simulatorVerificationFilter', value: input.simulatorVerificationFilter }, { name: 'hyperpayIdFilter', value: input.hyperpayIdFilter }, { name: 'paymentTypeFilter', value: input.paymentTypeFilter }, { name: 'paymentBrandFilter', value: input.paymentBrandFilter }, { name: 'descriptorFilter', value: input.descriptorFilter }, { name: 'merchantInvoiceIdFilter', value: input.merchantInvoiceIdFilter }, { name: 'maxHyperpayRequestIdFilter', value: input.maxHyperpayRequestIdFilter }, { name: 'minHyperpayRequestIdFilter', value: input.minHyperpayRequestIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'saveHyperpayResponse'
    abp.services.app.hyperpayResponses.saveHyperpayResponse = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/SaveHyperpayResponse',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'getHyperpayResponseByRequestId'
    abp.services.app.hyperpayResponses.getHyperpayResponseByRequestId = function(requestId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HyperpayResponses/GetHyperpayResponseByRequestId' + abp.utils.buildQueryString([{ name: 'requestId', value: requestId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'integrations'
  (function(){

    abp.services.app.integrations = abp.services.app.integrations || {};

    // action 'ePOSBillInquiry'
    abp.services.app.integrations.ePOSBillInquiry = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/EPOSBillInquiry',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'ePOSBillPay'
    abp.services.app.integrations.ePOSBillPay = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/EPOSBillPay',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'ePOSBillReversal'
    abp.services.app.integrations.ePOSBillReversal = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/EPOSBillReversal',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'prepareHyperCheckout'
    abp.services.app.integrations.prepareHyperCheckout = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/PrepareHyperCheckout',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'getHyperPaymentStatus'
    abp.services.app.integrations.getHyperPaymentStatus = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/GetHyperPaymentStatus' + abp.utils.buildQueryString([{ name: 'checkoutId', value: dto.checkoutId }, { name: 'entityId', value: dto.entityId }, { name: 'checkoutURL', value: dto.checkoutURL }, { name: 'authorizationKey', value: dto.authorizationKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPluginPaymentStatus'
    abp.services.app.integrations.getPluginPaymentStatus = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/GetPluginPaymentStatus' + abp.utils.buildQueryString([{ name: 'authorizationKey', value: dto.authorizationKey }, { name: 'pluginConfigurationId', value: dto.pluginConfigurationId }, { name: 'checkoutId', value: dto.checkoutId }, { name: 'billerCode', value: dto.billerCode }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'searchHyperpayTransaction'
    abp.services.app.integrations.searchHyperpayTransaction = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/SearchHyperpayTransaction',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'sendSMSUat'
    abp.services.app.integrations.sendSMSUat = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/SendSMSUat',
        type: 'POST',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

    // action 'sendSMS'
    abp.services.app.integrations.sendSMS = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/SendSMS',
        type: 'POST',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

    // action 'pushNotification'
    abp.services.app.integrations.pushNotification = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/PushNotification',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'distributionPayment'
    abp.services.app.integrations.distributionPayment = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Integrations/DistributionPayment',
        type: 'POST',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

  })();

  // controller 'locations'
  (function(){

    abp.services.app.locations = abp.services.app.locations || {};

    // action 'getAll'
    abp.services.app.locations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'locationArNameFilter', value: input.locationArNameFilter }, { name: 'locationEnNameFilter', value: input.locationEnNameFilter }, { name: 'locationLatitudeFilter', value: input.locationLatitudeFilter }, { name: 'locationLongitudeFilter', value: input.locationLongitudeFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'saturdayFromHourFilter', value: input.saturdayFromHourFilter }, { name: 'saturdayToHourFilter', value: input.saturdayToHourFilter }, { name: 'sunThursdayFromHourFilter', value: input.sunThursdayFromHourFilter }, { name: 'sunThursToHourFilter', value: input.sunThursToHourFilter }, { name: 'fridayFromHourFilter', value: input.fridayFromHourFilter }, { name: 'fridayToHourFilter', value: input.fridayToHourFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLocationForView'
    abp.services.app.locations.getLocationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/GetLocationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLocationForEdit'
    abp.services.app.locations.getLocationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/GetLocationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.locations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.locations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLocationsToExcel'
    abp.services.app.locations.getLocationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/GetLocationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'locationArNameFilter', value: input.locationArNameFilter }, { name: 'locationEnNameFilter', value: input.locationEnNameFilter }, { name: 'locationLatitudeFilter', value: input.locationLatitudeFilter }, { name: 'locationLongitudeFilter', value: input.locationLongitudeFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'saturdayFromHourFilter', value: input.saturdayFromHourFilter }, { name: 'saturdayToHourFilter', value: input.saturdayToHourFilter }, { name: 'sunThursdayFromHourFilter', value: input.sunThursdayFromHourFilter }, { name: 'sunThursToHourFilter', value: input.sunThursToHourFilter }, { name: 'fridayFromHourFilter', value: input.fridayFromHourFilter }, { name: 'fridayToHourFilter', value: input.fridayToHourFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.locations.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Locations/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'modules'
  (function(){

    abp.services.app.modules = abp.services.app.modules || {};

    // action 'getAll'
    abp.services.app.modules.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arabicDisplayNameFilter', value: input.arabicDisplayNameFilter }, { name: 'englishDisplayNameFilter', value: input.englishDisplayNameFilter }, { name: 'isHasCheckerPermissionsFilter', value: input.isHasCheckerPermissionsFilter }, { name: 'moduleSiteNameFilter', value: input.moduleSiteNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllModual'
    abp.services.app.modules.getAllModual = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/GetAllModual',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModuleForView'
    abp.services.app.modules.getModuleForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/GetModuleForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModuleForEdit'
    abp.services.app.modules.getModuleForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/GetModuleForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.modules.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.modules['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getModulesToExcel'
    abp.services.app.modules.getModulesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/GetModulesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arabicDisplayNameFilter', value: input.arabicDisplayNameFilter }, { name: 'englishDisplayNameFilter', value: input.englishDisplayNameFilter }, { name: 'isHasCheckerPermissionsFilter', value: input.isHasCheckerPermissionsFilter }, { name: 'moduleSiteNameFilter', value: input.moduleSiteNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllModuleSiteForTableDropdown'
    abp.services.app.modules.getAllModuleSiteForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Modules/GetAllModuleSiteForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'notificationsHistories'
  (function(){

    abp.services.app.notificationsHistories = abp.services.app.notificationsHistories || {};

    // action 'getAll'
    abp.services.app.notificationsHistories.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'textFilter', value: input.textFilter }, { name: 'maxRecipientIdFilter', value: input.maxRecipientIdFilter }, { name: 'minRecipientIdFilter', value: input.minRecipientIdFilter }, { name: 'isDeliveredFilter', value: input.isDeliveredFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'notificationsTemplateTextFilter', value: input.notificationsTemplateTextFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsHistoryForView'
    abp.services.app.notificationsHistories.getNotificationsHistoryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/GetNotificationsHistoryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsHistoryForEdit'
    abp.services.app.notificationsHistories.getNotificationsHistoryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/GetNotificationsHistoryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMyNotifcations'
    abp.services.app.notificationsHistories.getMyNotifcations = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/GetMyNotifcations' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateUserNotifications'
    abp.services.app.notificationsHistories.updateUserNotifications = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/UpdateUserNotifications' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.notificationsHistories.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.notificationsHistories['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getNotificationsHistoriesToExcel'
    abp.services.app.notificationsHistories.getNotificationsHistoriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/GetNotificationsHistoriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'textFilter', value: input.textFilter }, { name: 'maxRecipientIdFilter', value: input.maxRecipientIdFilter }, { name: 'minRecipientIdFilter', value: input.minRecipientIdFilter }, { name: 'isDeliveredFilter', value: input.isDeliveredFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'notificationsTemplateTextFilter', value: input.notificationsTemplateTextFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotificationsTemplateForTableDropdown'
    abp.services.app.notificationsHistories.getAllNotificationsTemplateForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsHistories/GetAllNotificationsTemplateForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'notificationsProfiles'
  (function(){

    abp.services.app.notificationsProfiles = abp.services.app.notificationsProfiles || {};

    // action 'getAll'
    abp.services.app.notificationsProfiles.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsProfileForView'
    abp.services.app.notificationsProfiles.getNotificationsProfileForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/GetNotificationsProfileForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsProfileForEdit'
    abp.services.app.notificationsProfiles.getNotificationsProfileForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/GetNotificationsProfileForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.notificationsProfiles.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.notificationsProfiles['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getNotificationsProfilesToExcel'
    abp.services.app.notificationsProfiles.getNotificationsProfilesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/GetNotificationsProfilesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeStatus'
    abp.services.app.notificationsProfiles.changeStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsProfiles/ChangeStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'notificationsSettings'
  (function(){

    abp.services.app.notificationsSettings = abp.services.app.notificationsSettings || {};

    // action 'getAll'
    abp.services.app.notificationsSettings.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'keySmsFilter', value: input.keySmsFilter }, { name: 'keyPushFilter', value: input.keyPushFilter }, { name: 'maxPortSmsFilter', value: input.maxPortSmsFilter }, { name: 'minPortSmsFilter', value: input.minPortSmsFilter }, { name: 'maxPortPushFilter', value: input.maxPortPushFilter }, { name: 'minPortPushFilter', value: input.minPortPushFilter }, { name: 'usernameSmsFilter', value: input.usernameSmsFilter }, { name: 'usernamePushFilter', value: input.usernamePushFilter }, { name: 'isDefaultFilter', value: input.isDefaultFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'passwordSmsFilter', value: input.passwordSmsFilter }, { name: 'passwordPushFilter', value: input.passwordPushFilter }, { name: 'serverSmsFilter', value: input.serverSmsFilter }, { name: 'serverPushFilter', value: input.serverPushFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsSettingForView'
    abp.services.app.notificationsSettings.getNotificationsSettingForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/GetNotificationsSettingForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsSettingForEdit'
    abp.services.app.notificationsSettings.getNotificationsSettingForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/GetNotificationsSettingForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.notificationsSettings.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.notificationsSettings['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'changeStatus'
    abp.services.app.notificationsSettings.changeStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/ChangeStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getNotificationsSettingsToExcel'
    abp.services.app.notificationsSettings.getNotificationsSettingsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsSettings/GetNotificationsSettingsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'keySmsFilter', value: input.keySmsFilter }, { name: 'keyPushFilter', value: input.keyPushFilter }, { name: 'maxPortSmsFilter', value: input.maxPortSmsFilter }, { name: 'minPortSmsFilter', value: input.minPortSmsFilter }, { name: 'maxPortPushFilter', value: input.maxPortPushFilter }, { name: 'minPortPushFilter', value: input.minPortPushFilter }, { name: 'usernameSmsFilter', value: input.usernameSmsFilter }, { name: 'usernamePushFilter', value: input.usernamePushFilter }, { name: 'isDefaultFilter', value: input.isDefaultFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'passwordSmsFilter', value: input.passwordSmsFilter }, { name: 'passwordPushFilter', value: input.passwordPushFilter }, { name: 'serverSmsFilter', value: input.serverSmsFilter }, { name: 'serverPushFilter', value: input.serverPushFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'notificationsTemplateProfiles'
  (function(){

    abp.services.app.notificationsTemplateProfiles = abp.services.app.notificationsTemplateProfiles || {};

    // action 'getAll'
    abp.services.app.notificationsTemplateProfiles.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'notificationsTemplateTextFilter', value: input.notificationsTemplateTextFilter }, { name: 'notificationsProfileNameFilter', value: input.notificationsProfileNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplateProfileForView'
    abp.services.app.notificationsTemplateProfiles.getNotificationsTemplateProfileForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/GetNotificationsTemplateProfileForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplateProfileForEdit'
    abp.services.app.notificationsTemplateProfiles.getNotificationsTemplateProfileForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/GetNotificationsTemplateProfileForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.notificationsTemplateProfiles.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.notificationsTemplateProfiles['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplateProfilesToExcel'
    abp.services.app.notificationsTemplateProfiles.getNotificationsTemplateProfilesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/GetNotificationsTemplateProfilesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'notificationsTemplateTextFilter', value: input.notificationsTemplateTextFilter }, { name: 'notificationsProfileNameFilter', value: input.notificationsProfileNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotificationsTemplateForTableDropdown'
    abp.services.app.notificationsTemplateProfiles.getAllNotificationsTemplateForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/GetAllNotificationsTemplateForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotificationsProfileForTableDropdown'
    abp.services.app.notificationsTemplateProfiles.getAllNotificationsProfileForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplateProfiles/GetAllNotificationsProfileForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'notificationsTemplates'
  (function(){

    abp.services.app.notificationsTemplates = abp.services.app.notificationsTemplates || {};

    // action 'getAll'
    abp.services.app.notificationsTemplates.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arTextFilter', value: input.arTextFilter }, { name: 'enTextFilter', value: input.enTextFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'notificationsProfileIdFilter', value: input.notificationsProfileIdFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplateForView'
    abp.services.app.notificationsTemplates.getNotificationsTemplateForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/GetNotificationsTemplateForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplateByNotificationProfileId'
    abp.services.app.notificationsTemplates.getNotificationsTemplateByNotificationProfileId = function(notificationsProfileId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/GetNotificationsTemplateByNotificationProfileId' + abp.utils.buildQueryString([{ name: 'notificationsProfileId', value: notificationsProfileId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplateForEdit'
    abp.services.app.notificationsTemplates.getNotificationsTemplateForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/GetNotificationsTemplateForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.notificationsTemplates.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.notificationsTemplates['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getNotificationsTemplatesToExcel'
    abp.services.app.notificationsTemplates.getNotificationsTemplatesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/GetNotificationsTemplatesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arTextFilter', value: input.arTextFilter }, { name: 'enTextFilter', value: input.enTextFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'notificationsProfileIdFilter', value: input.notificationsProfileIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotificationsProfileForTableDropdown'
    abp.services.app.notificationsTemplates.getAllNotificationsProfileForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/GetAllNotificationsProfileForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.notificationsTemplates.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationsTemplates/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'paymentDistributions'
  (function(){

    abp.services.app.paymentDistributions = abp.services.app.paymentDistributions || {};

    // action 'getAll'
    abp.services.app.paymentDistributions.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'inquiryRefFilter', value: input.inquiryRefFilter }, { name: 'paymentIdFilter', value: input.paymentIdFilter }, { name: 'billerIdFilter', value: input.billerIdFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentDistributionForView'
    abp.services.app.paymentDistributions.getPaymentDistributionForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/GetPaymentDistributionForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentDistributionForEdit'
    abp.services.app.paymentDistributions.getPaymentDistributionForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/GetPaymentDistributionForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.paymentDistributions.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createPaymentDistribution'
    abp.services.app.paymentDistributions.createPaymentDistribution = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/CreatePaymentDistribution',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.paymentDistributions['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'resetAttempts'
    abp.services.app.paymentDistributions.resetAttempts = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/ResetAttempts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getPaymentDistributionsToExcel'
    abp.services.app.paymentDistributions.getPaymentDistributionsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/GetPaymentDistributionsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'inquiryRefFilter', value: input.inquiryRefFilter }, { name: 'paymentIdFilter', value: input.paymentIdFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.paymentDistributions.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'jobWorkPaymentDistribution'
    abp.services.app.paymentDistributions.jobWorkPaymentDistribution = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentDistributions/JobWorkPaymentDistribution',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'payments'
  (function(){

    abp.services.app.payments = abp.services.app.payments || {};

    // action 'getAll'
    abp.services.app.payments.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'customerId', value: input.customerId }, { name: 'billId', value: input.billId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isPaging', value: input.isPaging }, { name: 'checkoutId', value: input.checkoutId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPayment'
    abp.services.app.payments.getAllPayment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllPayment' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'customerId', value: input.customerId }, { name: 'billId', value: input.billId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isPaging', value: input.isPaging }, { name: 'checkoutId', value: input.checkoutId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllExternalInstitutionPayments'
    abp.services.app.payments.getAllExternalInstitutionPayments = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllExternalInstitutionPayments' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billerIdFilter', value: input.billerIdFilter }, { name: 'externalInstituationIdFilter', value: input.externalInstituationIdFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'billId', value: input.billId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMyPayment'
    abp.services.app.payments.getMyPayment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetMyPayment' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'creationDate', value: input.creationDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentForView'
    abp.services.app.payments.getPaymentForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentHyperpayDetails'
    abp.services.app.payments.getPaymentHyperpayDetails = function(checkoutId, guidRef, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentHyperpayDetails' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }, { name: 'guidRef', value: guidRef }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentForViewByBillId'
    abp.services.app.payments.getPaymentForViewByBillId = function(billId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentForViewByBillId' + abp.utils.buildQueryString([{ name: 'billId', value: billId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentForEdit'
    abp.services.app.payments.getPaymentForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.payments.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updatePaymentStatus'
    abp.services.app.payments.updatePaymentStatus = function(refNo, status, errorMessage, bankTrxId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/UpdatePaymentStatus' + abp.utils.buildQueryString([{ name: 'refNo', value: refNo }, { name: 'status', value: status }, { name: 'errorMessage', value: errorMessage }, { name: 'bankTrxId', value: bankTrxId }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'updateBillPayment'
    abp.services.app.payments.updateBillPayment = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/UpdateBillPayment',
        type: 'PUT',
        data: JSON.stringify(model)
      }, ajaxParams));;
    };

    // action 'updatePaymentAdditionalFields'
    abp.services.app.payments.updatePaymentAdditionalFields = function(id, maskedPAN, terminalID, merchantID, rrn, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/UpdatePaymentAdditionalFields' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'maskedPAN', value: maskedPAN }, { name: 'terminalID', value: terminalID }, { name: 'merchantID', value: merchantID }, { name: 'rrn', value: rrn }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getPaymentByGuidRef'
    abp.services.app.payments.getPaymentByGuidRef = function(refNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentByGuidRef' + abp.utils.buildQueryString([{ name: 'refNo', value: refNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentByGuidRefOrRrn'
    abp.services.app.payments.getPaymentByGuidRefOrRrn = function(refNo, billInquiryId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentByGuidRefOrRrn' + abp.utils.buildQueryString([{ name: 'refNo', value: refNo }, { name: 'billInquiryId', value: billInquiryId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentById'
    abp.services.app.payments.getPaymentById = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentById' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.payments['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPaymentsToExcel'
    abp.services.app.payments.getPaymentsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'billId', value: input.billId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'customerId', value: input.customerId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentsIsProcessedToExcel'
    abp.services.app.payments.getPaymentsIsProcessedToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentsIsProcessedToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'billId', value: input.billId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'customerId', value: input.customerId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentsToAccess'
    abp.services.app.payments.getPaymentsToAccess = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetPaymentsToAccess' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'billId', value: input.billId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'customerId', value: input.customerId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSummaryCSV'
    abp.services.app.payments.getSummaryCSV = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetSummaryCSV' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'billId', value: input.billId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'customerId', value: input.customerId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTotalsCSV'
    abp.services.app.payments.getTotalsCSV = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetTotalsCSV' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'maxBillDateFilter', value: input.maxBillDateFilter }, { name: 'minBillDateFilter', value: input.minBillDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'maxAdditionalFeesFilter', value: input.maxAdditionalFeesFilter }, { name: 'minAdditionalFeesFilter', value: input.minAdditionalFeesFilter }, { name: 'errorMessageFilter', value: input.errorMessageFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'customerNameFilter', value: input.customerNameFilter }, { name: 'customerMobileNumberFilter', value: input.customerMobileNumberFilter }, { name: 'customerIdNumberFilter', value: input.customerIdNumberFilter }, { name: 'maxCustomerUserIdFilter', value: input.maxCustomerUserIdFilter }, { name: 'minCustomerUserIdFilter', value: input.minCustomerUserIdFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'billerServicesNameFilter', value: input.billerServicesNameFilter }, { name: 'billInquiryBillingNumberFilter', value: input.billInquiryBillingNumberFilter }, { name: 'billCustomerNameFilter', value: input.billCustomerNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'idTypeNameFilter', value: input.idTypeNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'billId', value: input.billId }, { name: 'fileFilterId', value: input.fileFilterId }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'b_TypeFilterId', value: input.b_TypeFilterId }, { name: 'regionFilterId', value: input.regionFilterId }, { name: 'sectorFilter', value: input.sectorFilter }, { name: 'monthFilterId', value: input.monthFilterId }, { name: 'yearFilterId', value: input.yearFilterId }, { name: 'customerId', value: input.customerId }, { name: 'billerServiceId', value: input.billerServiceId }, { name: 'isProcessed', value: input.isProcessed }, { name: 'isInternationald', value: input.isInternationald }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExternalInstitutionPaymentsForExcel'
    abp.services.app.payments.getExternalInstitutionPaymentsForExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetExternalInstitutionPaymentsForExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'billerIdFilter', value: input.billerIdFilter }, { name: 'externalInstituationIdFilter', value: input.externalInstituationIdFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'checkoutIdFilterId', value: input.checkoutIdFilterId }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'orderIdFilterId', value: input.orderIdFilterId }, { name: 'rRNFilter', value: input.rRNFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'paymentStatusNameFilter', value: input.paymentStatusNameFilter }, { name: 'paymentMethodNameFilter', value: input.paymentMethodNameFilter }, { name: 'accessChannelNameFilter', value: input.accessChannelNameFilter }, { name: 'currencyNameFilter', value: input.currencyNameFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'isPaymentConfirmedFilter', value: input.isPaymentConfirmedFilter }, { name: 'isReconciliationFilter', value: input.isReconciliationFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'billId', value: input.billId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAccessChannelForTableDropdown'
    abp.services.app.payments.getAllAccessChannelForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllAccessChannelForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.payments.getAllBillerForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllBillerForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerServiceForTableDropdown'
    abp.services.app.payments.getAllBillerServiceForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllBillerServiceForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillInquiryForTableDropdown'
    abp.services.app.payments.getAllBillInquiryForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllBillInquiryForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillForTableDropdown'
    abp.services.app.payments.getAllBillForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllBillForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllCurrencyForTableDropdown'
    abp.services.app.payments.getAllCurrencyForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllCurrencyForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllIdTypeForTableDropdown'
    abp.services.app.payments.getAllIdTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllIdTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentMethodForTableDropdown'
    abp.services.app.payments.getAllPaymentMethodForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllPaymentMethodForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentStatusForTableDropdown'
    abp.services.app.payments.getAllPaymentStatusForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllPaymentStatusForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentExternalInstitutionForTableDropdown'
    abp.services.app.payments.getAllPaymentExternalInstitutionForTableDropdown = function(externalInstitutionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllPaymentExternalInstitutionForTableDropdown' + abp.utils.buildQueryString([{ name: 'externalInstitutionId', value: externalInstitutionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createPayment'
    abp.services.app.payments.createPayment = function(checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CreatePayment' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'completeTransaction'
    abp.services.app.payments.completeTransaction = function(checkoutId, refNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CompleteTransaction' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }, { name: 'refNo', value: refNo }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'billCompleteTransaction'
    abp.services.app.payments.billCompleteTransaction = function(checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/BillCompleteTransaction' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'billCompleteTransactionAwaitingConfirmation'
    abp.services.app.payments.billCompleteTransactionAwaitingConfirmation = function(checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/BillCompleteTransactionAwaitingConfirmation' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'billCompleteTransactionAwaitingConfirmationFriendly'
    abp.services.app.payments.billCompleteTransactionAwaitingConfirmationFriendly = function(checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/BillCompleteTransactionAwaitingConfirmationFriendly' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'checkoutStatus'
    abp.services.app.payments.checkoutStatus = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CheckoutStatus',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'checkoutStatusWeb'
    abp.services.app.payments.checkoutStatusWeb = function(checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CheckoutStatusWeb' + abp.utils.buildQueryString([{ name: 'checkoutId', value: checkoutId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendPaymentNotificationReminder'
    abp.services.app.payments.sendPaymentNotificationReminder = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/SendPaymentNotificationReminder',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'createPaymentForBiller'
    abp.services.app.payments.createPaymentForBiller = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CreatePaymentForBiller',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'createPaymentForBillerSimple'
    abp.services.app.payments.createPaymentForBillerSimple = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CreatePaymentForBillerSimple',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'createPaymentForBillerSimpleNew'
    abp.services.app.payments.createPaymentForBillerSimpleNew = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CreatePaymentForBillerSimpleNew',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'ePOSBillPayment'
    abp.services.app.payments.ePOSBillPayment = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/EPOSBillPayment',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'reSendToEPOSBillPayment'
    abp.services.app.payments.reSendToEPOSBillPayment = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/ReSendToEPOSBillPayment',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'checkPendingPayments'
    abp.services.app.payments.checkPendingPayments = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/CheckPendingPayments',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllRegionForTableDropdown'
    abp.services.app.payments.getAllRegionForTableDropdown = function(geoLocationId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllRegionForTableDropdown' + abp.utils.buildQueryString([{ name: 'geoLocationId', value: geoLocationId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSectorForTableDropdown'
    abp.services.app.payments.getAllSectorForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payments/GetAllSectorForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'pluginConfigurations'
  (function(){

    abp.services.app.pluginConfigurations = abp.services.app.pluginConfigurations || {};

    // action 'getAll'
    abp.services.app.pluginConfigurations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PluginConfigurations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'serviceCodeFilter', value: input.serviceCodeFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPluginConfigurationForView'
    abp.services.app.pluginConfigurations.getPluginConfigurationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PluginConfigurations/GetPluginConfigurationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPluginConfigurationForEdit'
    abp.services.app.pluginConfigurations.getPluginConfigurationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PluginConfigurations/GetPluginConfigurationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.pluginConfigurations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PluginConfigurations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.pluginConfigurations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PluginConfigurations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPluginConfigurationsToExcel'
    abp.services.app.pluginConfigurations.getPluginConfigurationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PluginConfigurations/GetPluginConfigurationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'serviceCodeFilter', value: input.serviceCodeFilter }, { name: 'billerCodeFilter', value: input.billerCodeFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'reconciliations'
  (function(){

    abp.services.app.reconciliations = abp.services.app.reconciliations || {};

    // action 'getAll'
    abp.services.app.reconciliations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxReconDateFilter', value: input.maxReconDateFilter }, { name: 'minReconDateFilter', value: input.minReconDateFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAccessChannelFilter', value: input.maxAccessChannelFilter }, { name: 'minAccessChannelFilter', value: input.minAccessChannelFilter }, { name: 'maxPaymentMethodFilter', value: input.maxPaymentMethodFilter }, { name: 'minPaymentMethodFilter', value: input.minPaymentMethodFilter }, { name: 'maxCurrencyFilter', value: input.maxCurrencyFilter }, { name: 'minCurrencyFilter', value: input.minCurrencyFilter }, { name: 'maxBillerIdFilter', value: input.maxBillerIdFilter }, { name: 'minBillerIdFilter', value: input.minBillerIdFilter }, { name: 'maxCustomerProfileIdFilter', value: input.maxCustomerProfileIdFilter }, { name: 'minCustomerProfileIdFilter', value: input.minCustomerProfileIdFilter }, { name: 'paymentCustomerNameFilter', value: input.paymentCustomerNameFilter }, { name: 'paymentId', value: input.paymentId }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReconciliationForView'
    abp.services.app.reconciliations.getReconciliationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/GetReconciliationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReconciliationByPaymentForView'
    abp.services.app.reconciliations.getReconciliationByPaymentForView = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/GetReconciliationByPaymentForView' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReconciliationForEdit'
    abp.services.app.reconciliations.getReconciliationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/GetReconciliationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.reconciliations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.reconciliations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getReconciliationsToExcel'
    abp.services.app.reconciliations.getReconciliationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/GetReconciliationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxReconDateFilter', value: input.maxReconDateFilter }, { name: 'minReconDateFilter', value: input.minReconDateFilter }, { name: 'billingNumberFilter', value: input.billingNumberFilter }, { name: 'billNumberFilter', value: input.billNumberFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'maxProcessDateFilter', value: input.maxProcessDateFilter }, { name: 'minProcessDateFilter', value: input.minProcessDateFilter }, { name: 'guidRefFilter', value: input.guidRefFilter }, { name: 'maxFeesAmtFilter', value: input.maxFeesAmtFilter }, { name: 'minFeesAmtFilter', value: input.minFeesAmtFilter }, { name: 'bankTrxIDFilter', value: input.bankTrxIDFilter }, { name: 'maxAccessChannelFilter', value: input.maxAccessChannelFilter }, { name: 'minAccessChannelFilter', value: input.minAccessChannelFilter }, { name: 'maxPaymentMethodFilter', value: input.maxPaymentMethodFilter }, { name: 'minPaymentMethodFilter', value: input.minPaymentMethodFilter }, { name: 'maxCurrencyFilter', value: input.maxCurrencyFilter }, { name: 'minCurrencyFilter', value: input.minCurrencyFilter }, { name: 'maxBillerIdFilter', value: input.maxBillerIdFilter }, { name: 'minBillerIdFilter', value: input.minBillerIdFilter }, { name: 'maxCustomerProfileIdFilter', value: input.maxCustomerProfileIdFilter }, { name: 'minCustomerProfileIdFilter', value: input.minCustomerProfileIdFilter }, { name: 'paymentCustomerNameFilter', value: input.paymentCustomerNameFilter }, { name: 'paymentId', value: input.paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPaymentForTableDropdown'
    abp.services.app.reconciliations.getAllPaymentForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Reconciliations/GetAllPaymentForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sftpConfigrations'
  (function(){

    abp.services.app.sftpConfigrations = abp.services.app.sftpConfigrations || {};

    // action 'getAll'
    abp.services.app.sftpConfigrations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'hostFilter', value: input.hostFilter }, { name: 'maxPortFilter', value: input.maxPortFilter }, { name: 'minPortFilter', value: input.minPortFilter }, { name: 'usernameFilter', value: input.usernameFilter }, { name: 'passwordFilter', value: input.passwordFilter }, { name: 'recivedFileFilter', value: input.recivedFileFilter }, { name: 'directoryFilter', value: input.directoryFilter }, { name: 'closedFileFilter', value: input.closedFileFilter }, { name: 'maxFileTypeFilter', value: input.maxFileTypeFilter }, { name: 'minFileTypeFilter', value: input.minFileTypeFilter }, { name: 'isDeletedFilter', value: input.isDeletedFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'fileTypeFilter', value: input.fileTypeFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSftpConfigrationForView'
    abp.services.app.sftpConfigrations.getSftpConfigrationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetSftpConfigrationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSftpConfigrationForEdit'
    abp.services.app.sftpConfigrations.getSftpConfigrationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetSftpConfigrationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sftpConfigrations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sftpConfigrations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSftpConfigrationsToExcel'
    abp.services.app.sftpConfigrations.getSftpConfigrationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetSftpConfigrationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'hostFilter', value: input.hostFilter }, { name: 'maxPortFilter', value: input.maxPortFilter }, { name: 'minPortFilter', value: input.minPortFilter }, { name: 'usernameFilter', value: input.usernameFilter }, { name: 'passwordFilter', value: input.passwordFilter }, { name: 'recivedFileFilter', value: input.recivedFileFilter }, { name: 'directoryFilter', value: input.directoryFilter }, { name: 'closedFileFilter', value: input.closedFileFilter }, { name: 'maxFileTypeFilter', value: input.maxFileTypeFilter }, { name: 'minFileTypeFilter', value: input.minFileTypeFilter }, { name: 'isDeletedFilter', value: input.isDeletedFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'fileTypeFilter', value: input.fileTypeFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.sftpConfigrations.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'test'
    abp.services.app.sftpConfigrations.test = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/Test',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAllFileTypeForTableDropdown'
    abp.services.app.sftpConfigrations.getAllFileTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetAllFileTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sftpService'
    abp.services.app.sftpConfigrations.sftpService = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/SftpService',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllBillerServicesForTableDropdown'
    abp.services.app.sftpConfigrations.getAllBillerServicesForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetAllBillerServicesForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileTypeByCode'
    abp.services.app.sftpConfigrations.getFileTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SftpConfigrations/GetFileTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'thirdPartyAPIs'
  (function(){

    abp.services.app.thirdPartyAPIs = abp.services.app.thirdPartyAPIs || {};

    // action 'getAll'
    abp.services.app.thirdPartyAPIs.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ThirdPartyAPIs/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'urlFilter', value: input.urlFilter }, { name: 'headerFilter', value: input.headerFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getThirdPartyAPIForView'
    abp.services.app.thirdPartyAPIs.getThirdPartyAPIForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ThirdPartyAPIs/GetThirdPartyAPIForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getThirdPartyAPIForEdit'
    abp.services.app.thirdPartyAPIs.getThirdPartyAPIForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ThirdPartyAPIs/GetThirdPartyAPIForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.thirdPartyAPIs.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ThirdPartyAPIs/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.thirdPartyAPIs['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ThirdPartyAPIs/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getThirdPartyAPIsToExcel'
    abp.services.app.thirdPartyAPIs.getThirdPartyAPIsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ThirdPartyAPIs/GetThirdPartyAPIsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'urlFilter', value: input.urlFilter }, { name: 'headerFilter', value: input.headerFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'wCFClient'
  (function(){

    abp.services.app.wCFClient = abp.services.app.wCFClient || {};

    // action 'init'
    abp.services.app.wCFClient.init = function(clientName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WCFClient/Init' + abp.utils.buildQueryString([{ name: 'clientName', value: clientName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'workflowHistories'
  (function(){

    abp.services.app.workflowHistories = abp.services.app.workflowHistories || {};

    // action 'getAll'
    abp.services.app.workflowHistories.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'commentsFilter', value: input.commentsFilter }, { name: 'maxActionDateFilter', value: input.maxActionDateFilter }, { name: 'minActionDateFilter', value: input.minActionDateFilter }, { name: 'workflowRequestOriginalRequestJSONFilter', value: input.workflowRequestOriginalRequestJSONFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'actionTypeNameFilter', value: input.actionTypeNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowHistoryForView'
    abp.services.app.workflowHistories.getWorkflowHistoryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetWorkflowHistoryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowHistoryForEdit'
    abp.services.app.workflowHistories.getWorkflowHistoryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetWorkflowHistoryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workflowHistories.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workflowHistories['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getWorkflowHistoriesToExcel'
    abp.services.app.workflowHistories.getWorkflowHistoriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetWorkflowHistoriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'commentsFilter', value: input.commentsFilter }, { name: 'maxActionDateFilter', value: input.maxActionDateFilter }, { name: 'minActionDateFilter', value: input.minActionDateFilter }, { name: 'workflowRequestOriginalRequestJSONFilter', value: input.workflowRequestOriginalRequestJSONFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'actionTypeNameFilter', value: input.actionTypeNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWorkflowRequestForTableDropdown'
    abp.services.app.workflowHistories.getAllWorkflowRequestForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetAllWorkflowRequestForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.workflowHistories.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllActionTypeForTableDropdown'
    abp.services.app.workflowHistories.getAllActionTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowHistories/GetAllActionTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'workflowModules'
  (function(){

    abp.services.app.workflowModules = abp.services.app.workflowModules || {};

    // action 'getAll'
    abp.services.app.workflowModules.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'isEnabledFilter', value: input.isEnabledFilter }, { name: 'moduleDisplayNameFilter', value: input.moduleDisplayNameFilter }, { name: 'billerIdFilter', value: input.billerIdFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowModuleForView'
    abp.services.app.workflowModules.getWorkflowModuleForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetWorkflowModuleForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowModuleForEdit'
    abp.services.app.workflowModules.getWorkflowModuleForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetWorkflowModuleForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workflowModules.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workflowModules['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getWorkflowModulesToExcel'
    abp.services.app.workflowModules.getWorkflowModulesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetWorkflowModulesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'isEnabledFilter', value: input.isEnabledFilter }, { name: 'moduleDisplayNameFilter', value: input.moduleDisplayNameFilter }, { name: 'billerNameFilter', value: input.billerNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllModuleForTableDropdown'
    abp.services.app.workflowModules.getAllModuleForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetAllModuleForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBillerForTableDropdown'
    abp.services.app.workflowModules.getAllBillerForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetAllBillerForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'enableWorkflowModule'
    abp.services.app.workflowModules.enableWorkflowModule = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/EnableWorkflowModule',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getWorkflowModule'
    abp.services.app.workflowModules.getWorkflowModule = function(moduleTypeCode, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowModules/GetWorkflowModule' + abp.utils.buildQueryString([{ name: 'moduleTypeCode', value: moduleTypeCode }, { name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'workflowRequests'
  (function(){

    abp.services.app.workflowRequests = abp.services.app.workflowRequests || {};

    // action 'getAll'
    abp.services.app.workflowRequests.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxModuleTypeIdFilter', value: input.maxModuleTypeIdFilter }, { name: 'minModuleTypeIdFilter', value: input.minModuleTypeIdFilter }, { name: 'maxEntityIdFilter', value: input.maxEntityIdFilter }, { name: 'minEntityIdFilter', value: input.minEntityIdFilter }, { name: 'originalRequestJSONFilter', value: input.originalRequestJSONFilter }, { name: 'requestJSONFilter', value: input.requestJSONFilter }, { name: 'roleId', value: input.roleId }, { name: 'billerId', value: input.billerId }, { name: 'noteFilter', value: input.noteFilter }, { name: 'failedReasonFilter', value: input.failedReasonFilter }, { name: 'actionTypeNameFilter', value: input.actionTypeNameFilter }, { name: 'workflowStatusNameFilter', value: input.workflowStatusNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowRequestForView'
    abp.services.app.workflowRequests.getWorkflowRequestForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetWorkflowRequestForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowRequestForEdit'
    abp.services.app.workflowRequests.getWorkflowRequestForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetWorkflowRequestForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workflowRequests.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workflowRequests['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getWorkflowRequestsToExcel'
    abp.services.app.workflowRequests.getWorkflowRequestsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetWorkflowRequestsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxModuleTypeIdFilter', value: input.maxModuleTypeIdFilter }, { name: 'minModuleTypeIdFilter', value: input.minModuleTypeIdFilter }, { name: 'maxEntityIdFilter', value: input.maxEntityIdFilter }, { name: 'minEntityIdFilter', value: input.minEntityIdFilter }, { name: 'originalRequestJSONFilter', value: input.originalRequestJSONFilter }, { name: 'requestJSONFilter', value: input.requestJSONFilter }, { name: 'maxManagerIdFilter', value: input.maxManagerIdFilter }, { name: 'minManagerIdFilter', value: input.minManagerIdFilter }, { name: 'maxAssignedToIdFilter', value: input.maxAssignedToIdFilter }, { name: 'minAssignedToIdFilter', value: input.minAssignedToIdFilter }, { name: 'maxAdminIdFilter', value: input.maxAdminIdFilter }, { name: 'minAdminIdFilter', value: input.minAdminIdFilter }, { name: 'noteFilter', value: input.noteFilter }, { name: 'failedReasonFilter', value: input.failedReasonFilter }, { name: 'actionTypeNameFilter', value: input.actionTypeNameFilter }, { name: 'workflowStatusNameFilter', value: input.workflowStatusNameFilter }, { name: 'roleId', value: input.roleId }, { name: 'billerId', value: input.billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllActionTypeForTableDropdown'
    abp.services.app.workflowRequests.getAllActionTypeForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetAllActionTypeForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWorkflowStatusForTableDropdown'
    abp.services.app.workflowRequests.getAllWorkflowStatusForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetAllWorkflowStatusForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkIfWorkflowEnabled'
    abp.services.app.workflowRequests.checkIfWorkflowEnabled = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/CheckIfWorkflowEnabled',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'manageWorkflowRequest'
    abp.services.app.workflowRequests.manageWorkflowRequest = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/ManageWorkflowRequest',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'getUserRoleForTableDropdown'
    abp.services.app.workflowRequests.getUserRoleForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowRequests/GetUserRoleForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'workflows'
  (function(){

    abp.services.app.workflows = abp.services.app.workflows || {};

    // action 'getAll'
    abp.services.app.workflows.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxNextCheckerWFIdFilter', value: input.maxNextCheckerWFIdFilter }, { name: 'minNextCheckerWFIdFilter', value: input.minNextCheckerWFIdFilter }, { name: 'maxSequanceFilter', value: input.maxSequanceFilter }, { name: 'minSequanceFilter', value: input.minSequanceFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'moduleDisplayNameFilter', value: input.moduleDisplayNameFilter }, { name: 'roleNameFilter', value: input.roleNameFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowForView'
    abp.services.app.workflows.getWorkflowForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetWorkflowForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowForEdit'
    abp.services.app.workflows.getWorkflowForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetWorkflowForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workflows.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workflows['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getWorkflowsToExcel'
    abp.services.app.workflows.getWorkflowsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetWorkflowsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxNextCheckerWFIdFilter', value: input.maxNextCheckerWFIdFilter }, { name: 'minNextCheckerWFIdFilter', value: input.minNextCheckerWFIdFilter }, { name: 'maxSequanceFilter', value: input.maxSequanceFilter }, { name: 'minSequanceFilter', value: input.minSequanceFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'moduleDisplayNameFilter', value: input.moduleDisplayNameFilter }, { name: 'roleNameFilter', value: input.roleNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllModuleForTableDropdown'
    abp.services.app.workflows.getAllModuleForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetAllModuleForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllRoleForTableDropdown'
    abp.services.app.workflows.getAllRoleForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetAllRoleForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.workflows.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getWorkflow'
    abp.services.app.workflows.getWorkflow = function(moduleTypeId, billerId, roleId, sequence, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Workflows/GetWorkflow' + abp.utils.buildQueryString([{ name: 'moduleTypeId', value: moduleTypeId }, { name: 'billerId', value: billerId }, { name: 'roleId', value: roleId }, { name: 'sequence', value: sequence }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'billingSession'
  (function(){

    abp.services.app.billingSession = abp.services.app.billingSession || {};

    // action 'setGeoLocationId'
    abp.services.app.billingSession.setGeoLocationId = function(geoLocationId, userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillingSession/SetGeoLocationId' + abp.utils.buildQueryString([{ name: 'geoLocationId', value: geoLocationId }, { name: 'userId', value: userId }]) + '',
        type: 'POST',
        dataType: null
      }, ajaxParams));;
    };

    // action 'setBillerId'
    abp.services.app.billingSession.setBillerId = function(billerId, userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillingSession/SetBillerId' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }, { name: 'userId', value: userId }]) + '',
        type: 'POST',
        dataType: null
      }, ajaxParams));;
    };

    // action 'setExternalInstitutionId'
    abp.services.app.billingSession.setExternalInstitutionId = function(externalInstitutionId, userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillingSession/SetExternalInstitutionId' + abp.utils.buildQueryString([{ name: 'externalInstitutionId', value: externalInstitutionId }, { name: 'userId', value: userId }]) + '',
        type: 'POST',
        dataType: null
      }, ajaxParams));;
    };

    // action 'setBillerCode'
    abp.services.app.billingSession.setBillerCode = function(billerCode, userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillingSession/SetBillerCode' + abp.utils.buildQueryString([{ name: 'billerCode', value: billerCode }, { name: 'userId', value: userId }]) + '',
        type: 'POST',
        dataType: null
      }, ajaxParams));;
    };

    // action 'use'
    abp.services.app.billingSession.use = function(tenantId, userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillingSession/Use' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'userId', value: userId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'session'
  (function(){

    abp.services.app.session = abp.services.app.session || {};

    // action 'getCurrentLoginInformations'
    abp.services.app.session.getCurrentLoginInformations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/GetCurrentLoginInformations',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateUserSignInToken'
    abp.services.app.session.updateUserSignInToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/UpdateUserSignInToken',
        type: 'PUT'
      }, ajaxParams));;
    };

  })();

  // controller 'organizationUnit'
  (function(){

    abp.services.app.organizationUnit = abp.services.app.organizationUnit || {};

    // action 'getOrganizationUnits'
    abp.services.app.organizationUnit.getOrganizationUnits = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetOrganizationUnits',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizationUnitUsers'
    abp.services.app.organizationUnit.getOrganizationUnitUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetOrganizationUnitUsers' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizationUnitRoles'
    abp.services.app.organizationUnit.getOrganizationUnitRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetOrganizationUnitRoles' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrganizationUnit'
    abp.services.app.organizationUnit.createOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/CreateOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateOrganizationUnit'
    abp.services.app.organizationUnit.updateOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/UpdateOrganizationUnit',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'moveOrganizationUnit'
    abp.services.app.organizationUnit.moveOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/MoveOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteOrganizationUnit'
    abp.services.app.organizationUnit.deleteOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/DeleteOrganizationUnit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'removeUserFromOrganizationUnit'
    abp.services.app.organizationUnit.removeUserFromOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit' + abp.utils.buildQueryString([{ name: 'userId', value: input.userId }, { name: 'organizationUnitId', value: input.organizationUnitId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'removeRoleFromOrganizationUnit'
    abp.services.app.organizationUnit.removeRoleFromOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/RemoveRoleFromOrganizationUnit' + abp.utils.buildQueryString([{ name: 'roleId', value: input.roleId }, { name: 'organizationUnitId', value: input.organizationUnitId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'addUsersToOrganizationUnit'
    abp.services.app.organizationUnit.addUsersToOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/AddUsersToOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'addRolesToOrganizationUnit'
    abp.services.app.organizationUnit.addRolesToOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/AddRolesToOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'findUsers'
    abp.services.app.organizationUnit.findUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/FindUsers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'findRoles'
    abp.services.app.organizationUnit.findRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/FindRoles',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'notification'
  (function(){

    abp.services.app.notification = abp.services.app.notification || {};

    // action 'getUserNotifications'
    abp.services.app.notification.getUserNotifications = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/GetUserNotifications' + abp.utils.buildQueryString([{ name: 'state', value: input.state }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setAllNotificationsAsRead'
    abp.services.app.notification.setAllNotificationsAsRead = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/SetAllNotificationsAsRead',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setNotificationAsRead'
    abp.services.app.notification.setNotificationAsRead = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/SetNotificationAsRead',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getNotificationSettings'
    abp.services.app.notification.getNotificationSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/GetNotificationSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateNotificationSettings'
    abp.services.app.notification.updateNotificationSettings = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/UpdateNotificationSettings',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteNotification'
    abp.services.app.notification.deleteNotification = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/DeleteNotification' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'deleteAllUserNotifications'
    abp.services.app.notification.deleteAllUserNotifications = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/DeleteAllUserNotifications' + abp.utils.buildQueryString([{ name: 'state', value: input.state }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'subscription'
  (function(){

    abp.services.app.subscription = abp.services.app.subscription || {};

    // action 'disableRecurringPayments'
    abp.services.app.subscription.disableRecurringPayments = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Subscription/DisableRecurringPayments',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'enableRecurringPayments'
    abp.services.app.subscription.enableRecurringPayments = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Subscription/EnableRecurringPayments',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'tenant'
  (function(){

    abp.services.app.tenant = abp.services.app.tenant || {};

    // action 'getTenants'
    abp.services.app.tenant.getTenants = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetTenants' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'subscriptionEndDateStart', value: input.subscriptionEndDateStart }, { name: 'subscriptionEndDateEnd', value: input.subscriptionEndDateEnd }, { name: 'creationDateStart', value: input.creationDateStart }, { name: 'creationDateEnd', value: input.creationDateEnd }, { name: 'editionId', value: input.editionId }, { name: 'editionIdSpecified', value: input.editionIdSpecified }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createTenant'
    abp.services.app.tenant.createTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/CreateTenant',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getTenantForEdit'
    abp.services.app.tenant.getTenantForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetTenantForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateTenant'
    abp.services.app.tenant.updateTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UpdateTenant',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteTenant'
    abp.services.app.tenant.deleteTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/DeleteTenant' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTenantFeaturesForEdit'
    abp.services.app.tenant.getTenantFeaturesForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetTenantFeaturesForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateTenantFeatures'
    abp.services.app.tenant.updateTenantFeatures = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UpdateTenantFeatures',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetTenantSpecificFeatures'
    abp.services.app.tenant.resetTenantSpecificFeatures = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/ResetTenantSpecificFeatures',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'unlockTenantAdmin'
    abp.services.app.tenant.unlockTenantAdmin = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UnlockTenantAdmin',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'tenantRegistration'
  (function(){

    abp.services.app.tenantRegistration = abp.services.app.tenantRegistration || {};

    // action 'registerTenant'
    abp.services.app.tenantRegistration.registerTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantRegistration/RegisterTenant',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEditionsForSelect'
    abp.services.app.tenantRegistration.getEditionsForSelect = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantRegistration/GetEditionsForSelect',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEdition'
    abp.services.app.tenantRegistration.getEdition = function(editionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantRegistration/GetEdition' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'payment'
  (function(){

    abp.services.app.payment = abp.services.app.payment || {};

    // action 'getPaymentInfo'
    abp.services.app.payment.getPaymentInfo = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/GetPaymentInfo' + abp.utils.buildQueryString([{ name: 'upgradeEditionId', value: input.upgradeEditionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createPayment'
    abp.services.app.payment.createPayment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/CreatePayment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'cancelPayment'
    abp.services.app.payment.cancelPayment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/CancelPayment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getPaymentHistory'
    abp.services.app.payment.getPaymentHistory = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/GetPaymentHistory' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getActiveGateways'
    abp.services.app.payment.getActiveGateways = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/GetActiveGateways' + abp.utils.buildQueryString([{ name: 'recurringPaymentsEnabled', value: input.recurringPaymentsEnabled }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPayment'
    abp.services.app.payment.getPayment = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/GetPayment' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLastCompletedPayment'
    abp.services.app.payment.getLastCompletedPayment = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/GetLastCompletedPayment',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'buyNowSucceed'
    abp.services.app.payment.buyNowSucceed = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/BuyNowSucceed' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'newRegistrationSucceed'
    abp.services.app.payment.newRegistrationSucceed = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/NewRegistrationSucceed' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'upgradeSucceed'
    abp.services.app.payment.upgradeSucceed = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/UpgradeSucceed' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'extendSucceed'
    abp.services.app.payment.extendSucceed = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/ExtendSucceed' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'paymentFailed'
    abp.services.app.payment.paymentFailed = function(paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/PaymentFailed' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'switchBetweenFreeEditions'
    abp.services.app.payment.switchBetweenFreeEditions = function(upgradeEditionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/SwitchBetweenFreeEditions' + abp.utils.buildQueryString([{ name: 'upgradeEditionId', value: upgradeEditionId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'upgradeSubscriptionCostsLessThenMinAmount'
    abp.services.app.payment.upgradeSubscriptionCostsLessThenMinAmount = function(editionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/UpgradeSubscriptionCostsLessThenMinAmount' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'hasAnyPayment'
    abp.services.app.payment.hasAnyPayment = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/HasAnyPayment',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllPaymentMethods'
    abp.services.app.payment.getAllPaymentMethods = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Payment/GetAllPaymentMethods',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'payPalPayment'
  (function(){

    abp.services.app.payPalPayment = abp.services.app.payPalPayment || {};

    // action 'confirmPayment'
    abp.services.app.payPalPayment.confirmPayment = function(paymentId, paypalOrderId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPalPayment/ConfirmPayment' + abp.utils.buildQueryString([{ name: 'paymentId', value: paymentId }, { name: 'paypalOrderId', value: paypalOrderId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getConfiguration'
    abp.services.app.payPalPayment.getConfiguration = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPalPayment/GetConfiguration',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'stripePayment'
  (function(){

    abp.services.app.stripePayment = abp.services.app.stripePayment || {};

    // action 'getConfiguration'
    abp.services.app.stripePayment.getConfiguration = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StripePayment/GetConfiguration',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPayment'
    abp.services.app.stripePayment.getPayment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StripePayment/GetPayment' + abp.utils.buildQueryString([{ name: 'stripeSessionId', value: input.stripeSessionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createPaymentSession'
    abp.services.app.stripePayment.createPaymentSession = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StripePayment/CreatePaymentSession',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getPaymentResult'
    abp.services.app.stripePayment.getPaymentResult = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StripePayment/GetPaymentResult' + abp.utils.buildQueryString([{ name: 'paymentId', value: input.paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostDashboard'
  (function(){

    abp.services.app.hostDashboard = abp.services.app.hostDashboard || {};

    // action 'getTopStatsData'
    abp.services.app.hostDashboard.getTopStatsData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetTopStatsData' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRecentTenantsData'
    abp.services.app.hostDashboard.getRecentTenantsData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetRecentTenantsData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubscriptionExpiringTenantsData'
    abp.services.app.hostDashboard.getSubscriptionExpiringTenantsData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetSubscriptionExpiringTenantsData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIncomeStatistics'
    abp.services.app.hostDashboard.getIncomeStatistics = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetIncomeStatistics' + abp.utils.buildQueryString([{ name: 'incomeStatisticsDateInterval', value: input.incomeStatisticsDateInterval }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEditionTenantStatistics'
    abp.services.app.hostDashboard.getEditionTenantStatistics = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetEditionTenantStatistics' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'invoice'
  (function(){

    abp.services.app.invoice = abp.services.app.invoice || {};

    // action 'getInvoiceInfo'
    abp.services.app.invoice.getInvoiceInfo = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Invoice/GetInvoiceInfo' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createInvoice'
    abp.services.app.invoice.createInvoice = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Invoice/CreateInvoice',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'accessChannels'
  (function(){

    abp.services.app.accessChannels = abp.services.app.accessChannels || {};

    // action 'getAll'
    abp.services.app.accessChannels.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAccessChannelForView'
    abp.services.app.accessChannels.getAccessChannelForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/GetAccessChannelForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAccessChannelByCode'
    abp.services.app.accessChannels.getAccessChannelByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/GetAccessChannelByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAccessChannelForEdit'
    abp.services.app.accessChannels.getAccessChannelForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/GetAccessChannelForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.accessChannels.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.accessChannels['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAccessChannelsToExcel'
    abp.services.app.accessChannels.getAccessChannelsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/GetAccessChannelsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.accessChannels.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessChannels/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'actionTypes'
  (function(){

    abp.services.app.actionTypes = abp.services.app.actionTypes || {};

    // action 'getAll'
    abp.services.app.actionTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getActionTypeForView'
    abp.services.app.actionTypes.getActionTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/GetActionTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getActionTypeForEdit'
    abp.services.app.actionTypes.getActionTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/GetActionTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getActionTypeByCode'
    abp.services.app.actionTypes.getActionTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/GetActionTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.actionTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.actionTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getActionTypesToExcel'
    abp.services.app.actionTypes.getActionTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/GetActionTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.actionTypes.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ActionTypes/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'billerCategories'
  (function(){

    abp.services.app.billerCategories = abp.services.app.billerCategories || {};

    // action 'getAll'
    abp.services.app.billerCategories.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerCategoryForView'
    abp.services.app.billerCategories.getBillerCategoryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/GetBillerCategoryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerCategoryByCode'
    abp.services.app.billerCategories.getBillerCategoryByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/GetBillerCategoryByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillerCategoryForEdit'
    abp.services.app.billerCategories.getBillerCategoryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/GetBillerCategoryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billerCategories.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billerCategories['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBillerCategoriesToExcel'
    abp.services.app.billerCategories.getBillerCategoriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/GetBillerCategoriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.billerCategories.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillerCategories/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'billStatutses'
  (function(){

    abp.services.app.billStatutses = abp.services.app.billStatutses || {};

    // action 'getAll'
    abp.services.app.billStatutses.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillStatutsForView'
    abp.services.app.billStatutses.getBillStatutsForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/GetBillStatutsForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillStatusByCode'
    abp.services.app.billStatutses.getBillStatusByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/GetBillStatusByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillStatutsForEdit'
    abp.services.app.billStatutses.getBillStatutsForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/GetBillStatutsForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billStatutses.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billStatutses['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBillStatutsesToExcel'
    abp.services.app.billStatutses.getBillStatutsesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/GetBillStatutsesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.billStatutses.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillStatutses/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'billTypes'
  (function(){

    abp.services.app.billTypes = abp.services.app.billTypes || {};

    // action 'getAll'
    abp.services.app.billTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillTypeForView'
    abp.services.app.billTypes.getBillTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/GetBillTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillTypeByCode'
    abp.services.app.billTypes.getBillTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/GetBillTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBillTypeForEdit'
    abp.services.app.billTypes.getBillTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/GetBillTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.billTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.billTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBillTypesToExcel'
    abp.services.app.billTypes.getBillTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/GetBillTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.billTypes.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BillTypes/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'bins'
  (function(){

    abp.services.app.bins = abp.services.app.bins || {};

    // action 'getAll'
    abp.services.app.bins.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'startRangeFilter', value: input.startRangeFilter }, { name: 'endRangeFilter', value: input.endRangeFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBinForView'
    abp.services.app.bins.getBinForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/GetBinForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBinForEdit'
    abp.services.app.bins.getBinForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/GetBinForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bins.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bins['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBinsToExcel'
    abp.services.app.bins.getBinsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/GetBinsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'startRangeFilter', value: input.startRangeFilter }, { name: 'endRangeFilter', value: input.endRangeFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkBin'
    abp.services.app.bins.checkBin = function(bin, checkoutId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/CheckBin' + abp.utils.buildQueryString([{ name: 'bin', value: bin }, { name: 'checkoutId', value: checkoutId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'isInternationalBIN'
    abp.services.app.bins.isInternationalBIN = function(bin, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/IsInternationalBIN' + abp.utils.buildQueryString([{ name: 'bin', value: bin }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'changeStatus'
    abp.services.app.bins.changeStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bins/ChangeStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'b_Types'
  (function(){

    abp.services.app.b_Types = abp.services.app.b_Types || {};

    // action 'getAll'
    abp.services.app.b_Types.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getB_TypeForView'
    abp.services.app.b_Types.getB_TypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/GetB_TypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getB_TypeForEdit'
    abp.services.app.b_Types.getB_TypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/GetB_TypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.b_Types.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.b_Types['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getB_TypesToExcel'
    abp.services.app.b_Types.getB_TypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/GetB_TypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGeoLocationForTableDropdown'
    abp.services.app.b_Types.getAllGeoLocationForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/B_Types/GetAllGeoLocationForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'countries'
  (function(){

    abp.services.app.countries = abp.services.app.countries || {};

    // action 'getAll'
    abp.services.app.countries.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCountryForView'
    abp.services.app.countries.getCountryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/GetCountryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCountryByCode'
    abp.services.app.countries.getCountryByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/GetCountryByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCountryForEdit'
    abp.services.app.countries.getCountryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/GetCountryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.countries.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.countries['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCountriesToExcel'
    abp.services.app.countries.getCountriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/GetCountriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.countries.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Countries/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'currencies'
  (function(){

    abp.services.app.currencies = abp.services.app.currencies || {};

    // action 'getAll'
    abp.services.app.currencies.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurrencyForView'
    abp.services.app.currencies.getCurrencyForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/GetCurrencyForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurrencyByCode'
    abp.services.app.currencies.getCurrencyByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/GetCurrencyByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurrencyForEdit'
    abp.services.app.currencies.getCurrencyForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/GetCurrencyForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.currencies.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.currencies['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCurrenciesToExcel'
    abp.services.app.currencies.getCurrenciesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/GetCurrenciesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.currencies.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Currencies/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'customerCategories'
  (function(){

    abp.services.app.customerCategories = abp.services.app.customerCategories || {};

    // action 'getAll'
    abp.services.app.customerCategories.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerCategoryForView'
    abp.services.app.customerCategories.getCustomerCategoryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/GetCustomerCategoryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerCategoryByCode'
    abp.services.app.customerCategories.getCustomerCategoryByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/GetCustomerCategoryByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerCategoryForEdit'
    abp.services.app.customerCategories.getCustomerCategoryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/GetCustomerCategoryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.customerCategories.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.customerCategories['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCustomerCategoriesToExcel'
    abp.services.app.customerCategories.getCustomerCategoriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/GetCustomerCategoriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeStatus'
    abp.services.app.customerCategories.changeStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerCategories/ChangeStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'customerStatuses'
  (function(){

    abp.services.app.customerStatuses = abp.services.app.customerStatuses || {};

    // action 'getAll'
    abp.services.app.customerStatuses.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerStatusForView'
    abp.services.app.customerStatuses.getCustomerStatusForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/GetCustomerStatusForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomerStatusForEdit'
    abp.services.app.customerStatuses.getCustomerStatusForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/GetCustomerStatusForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.customerStatuses.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.customerStatuses['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCustomerStatusesToExcel'
    abp.services.app.customerStatuses.getCustomerStatusesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/GetCustomerStatusesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.customerStatuses.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CustomerStatuses/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'feesTypes'
  (function(){

    abp.services.app.feesTypes = abp.services.app.feesTypes || {};

    // action 'getAll'
    abp.services.app.feesTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFeesTypeForView'
    abp.services.app.feesTypes.getFeesTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/GetFeesTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFeesTypeForEdit'
    abp.services.app.feesTypes.getFeesTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/GetFeesTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.feesTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.feesTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFeesTypesToExcel'
    abp.services.app.feesTypes.getFeesTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/GetFeesTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeStatus'
    abp.services.app.feesTypes.changeStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FeesTypes/ChangeStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'fileStatuses'
  (function(){

    abp.services.app.fileStatuses = abp.services.app.fileStatuses || {};

    // action 'getAll'
    abp.services.app.fileStatuses.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileStatusForView'
    abp.services.app.fileStatuses.getFileStatusForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/GetFileStatusForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileStatusForEdit'
    abp.services.app.fileStatuses.getFileStatusForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/GetFileStatusForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.fileStatuses.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.fileStatuses['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFileStatusesToExcel'
    abp.services.app.fileStatuses.getFileStatusesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/GetFileStatusesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.fileStatuses.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileStatuses/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'fileTypes'
  (function(){

    abp.services.app.fileTypes = abp.services.app.fileTypes || {};

    // action 'getAll'
    abp.services.app.fileTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileTypeForView'
    abp.services.app.fileTypes.getFileTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/GetFileTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileTypeByCode'
    abp.services.app.fileTypes.getFileTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/GetFileTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFileTypeForEdit'
    abp.services.app.fileTypes.getFileTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/GetFileTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.fileTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.fileTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFileTypesToExcel'
    abp.services.app.fileTypes.getFileTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/GetFileTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.fileTypes.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FileTypes/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'geoLocations'
  (function(){

    abp.services.app.geoLocations = abp.services.app.geoLocations || {};

    // action 'getAll'
    abp.services.app.geoLocations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeoLocationForView'
    abp.services.app.geoLocations.getGeoLocationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/GetGeoLocationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeoLocationForEdit'
    abp.services.app.geoLocations.getGeoLocationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/GetGeoLocationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.geoLocations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.geoLocations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGeoLocationsToExcel'
    abp.services.app.geoLocations.getGeoLocationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/GetGeoLocationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGeoLocationForTableDropdown'
    abp.services.app.geoLocations.getAllGeoLocationForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GeoLocations/GetAllGeoLocationForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'idTypes'
  (function(){

    abp.services.app.idTypes = abp.services.app.idTypes || {};

    // action 'getAll'
    abp.services.app.idTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIdTypeForView'
    abp.services.app.idTypes.getIdTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/GetIdTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIdTypeByCode'
    abp.services.app.idTypes.getIdTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/GetIdTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIdTypeForEdit'
    abp.services.app.idTypes.getIdTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/GetIdTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.idTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.idTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getIdTypesToExcel'
    abp.services.app.idTypes.getIdTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/GetIdTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.idTypes.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IdTypes/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'integrationTypes'
  (function(){

    abp.services.app.integrationTypes = abp.services.app.integrationTypes || {};

    // action 'getAll'
    abp.services.app.integrationTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIntegrationTypeForView'
    abp.services.app.integrationTypes.getIntegrationTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/GetIntegrationTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIntegrationTypeByCode'
    abp.services.app.integrationTypes.getIntegrationTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/GetIntegrationTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIntegrationTypeForEdit'
    abp.services.app.integrationTypes.getIntegrationTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/GetIntegrationTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.integrationTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.integrationTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getIntegrationTypesToExcel'
    abp.services.app.integrationTypes.getIntegrationTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/GetIntegrationTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.integrationTypes.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntegrationTypes/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'moduleSites'
  (function(){

    abp.services.app.moduleSites = abp.services.app.moduleSites || {};

    // action 'getAll'
    abp.services.app.moduleSites.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModuleSiteForView'
    abp.services.app.moduleSites.getModuleSiteForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/GetModuleSiteForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModuleSiteForEdit'
    abp.services.app.moduleSites.getModuleSiteForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/GetModuleSiteForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.moduleSites.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.moduleSites['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getModuleSitesToExcel'
    abp.services.app.moduleSites.getModuleSitesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/GetModuleSitesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.moduleSites.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleSites/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'packageErrors'
  (function(){

    abp.services.app.packageErrors = abp.services.app.packageErrors || {};

    // action 'getAll'
    abp.services.app.packageErrors.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PackageErrors/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'pk_IDFilter', value: input.pk_IDFilter }, { name: 'machine_NameFilter', value: input.machine_NameFilter }, { name: 'package_NameFilter', value: input.package_NameFilter }, { name: 'task_NameFilter', value: input.task_NameFilter }, { name: 'maxError_CodeFilter', value: input.maxError_CodeFilter }, { name: 'minError_CodeFilter', value: input.minError_CodeFilter }, { name: 'error_DescriptionFilter', value: input.error_DescriptionFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPackageErrorForView'
    abp.services.app.packageErrors.getPackageErrorForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PackageErrors/GetPackageErrorForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPackageErrorForEdit'
    abp.services.app.packageErrors.getPackageErrorForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PackageErrors/GetPackageErrorForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.packageErrors.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PackageErrors/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.packageErrors['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PackageErrors/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPackageErrorsToExcel'
    abp.services.app.packageErrors.getPackageErrorsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PackageErrors/GetPackageErrorsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'pk_IDFilter', value: input.pk_IDFilter }, { name: 'machine_NameFilter', value: input.machine_NameFilter }, { name: 'package_NameFilter', value: input.package_NameFilter }, { name: 'task_NameFilter', value: input.task_NameFilter }, { name: 'maxError_CodeFilter', value: input.maxError_CodeFilter }, { name: 'minError_CodeFilter', value: input.minError_CodeFilter }, { name: 'error_DescriptionFilter', value: input.error_DescriptionFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'paymentMethods'
  (function(){

    abp.services.app.paymentMethods = abp.services.app.paymentMethods || {};

    // action 'getAll'
    abp.services.app.paymentMethods.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentMethodForView'
    abp.services.app.paymentMethods.getPaymentMethodForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/GetPaymentMethodForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentMethodByCode'
    abp.services.app.paymentMethods.getPaymentMethodByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/GetPaymentMethodByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentMethodForEdit'
    abp.services.app.paymentMethods.getPaymentMethodForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/GetPaymentMethodForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.paymentMethods.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.paymentMethods['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPaymentMethodsToExcel'
    abp.services.app.paymentMethods.getPaymentMethodsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/GetPaymentMethodsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.paymentMethods.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentMethods/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'paymentStatuses'
  (function(){

    abp.services.app.paymentStatuses = abp.services.app.paymentStatuses || {};

    // action 'getAll'
    abp.services.app.paymentStatuses.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentStatusForView'
    abp.services.app.paymentStatuses.getPaymentStatusForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/GetPaymentStatusForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentStatusByCode'
    abp.services.app.paymentStatuses.getPaymentStatusByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/GetPaymentStatusByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentStatusForEdit'
    abp.services.app.paymentStatuses.getPaymentStatusForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/GetPaymentStatusForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.paymentStatuses.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.paymentStatuses['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPaymentStatusesToExcel'
    abp.services.app.paymentStatuses.getPaymentStatusesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/GetPaymentStatusesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.paymentStatuses.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentStatuses/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'paymentTypes'
  (function(){

    abp.services.app.paymentTypes = abp.services.app.paymentTypes || {};

    // action 'getAll'
    abp.services.app.paymentTypes.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentTypeForView'
    abp.services.app.paymentTypes.getPaymentTypeForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/GetPaymentTypeForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentTypeByCode'
    abp.services.app.paymentTypes.getPaymentTypeByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/GetPaymentTypeByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentTypeForEdit'
    abp.services.app.paymentTypes.getPaymentTypeForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/GetPaymentTypeForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.paymentTypes.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.paymentTypes['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPaymentTypesToExcel'
    abp.services.app.paymentTypes.getPaymentTypesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/GetPaymentTypesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.paymentTypes.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTypes/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'regions'
  (function(){

    abp.services.app.regions = abp.services.app.regions || {};

    // action 'getAll'
    abp.services.app.regions.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWeb'
    abp.services.app.regions.getAllWeb = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/GetAllWeb',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionForView'
    abp.services.app.regions.getRegionForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/GetRegionForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionForEdit'
    abp.services.app.regions.getRegionForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/GetRegionForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.regions.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.regions['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getRegionsToExcel'
    abp.services.app.regions.getRegionsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/GetRegionsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'geoLocationFilterId', value: input.geoLocationFilterId }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGeoLocationForTableDropdown'
    abp.services.app.regions.getAllGeoLocationForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Regions/GetAllGeoLocationForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sectors'
  (function(){

    abp.services.app.sectors = abp.services.app.sectors || {};

    // action 'getAll'
    abp.services.app.sectors.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Sectors/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSectorForView'
    abp.services.app.sectors.getSectorForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Sectors/GetSectorForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSectorForEdit'
    abp.services.app.sectors.getSectorForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Sectors/GetSectorForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sectors.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Sectors/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sectors['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Sectors/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSectorsToExcel'
    abp.services.app.sectors.getSectorsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Sectors/GetSectorsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'workflowStatuses'
  (function(){

    abp.services.app.workflowStatuses = abp.services.app.workflowStatuses || {};

    // action 'getAll'
    abp.services.app.workflowStatuses.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'isPaging', value: input.isPaging }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowStatusForView'
    abp.services.app.workflowStatuses.getWorkflowStatusForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/GetWorkflowStatusForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowStatusForEdit'
    abp.services.app.workflowStatuses.getWorkflowStatusForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/GetWorkflowStatusForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkflowStatusByCode'
    abp.services.app.workflowStatuses.getWorkflowStatusByCode = function(code, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/GetWorkflowStatusByCode' + abp.utils.buildQueryString([{ name: 'code', value: code }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workflowStatuses.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workflowStatuses['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getWorkflowStatusesToExcel'
    abp.services.app.workflowStatuses.getWorkflowStatusesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/GetWorkflowStatusesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'arNameFilter', value: input.arNameFilter }, { name: 'enNameFilter', value: input.enNameFilter }, { name: 'descriptionFilter', value: input.descriptionFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chanageStatus'
    abp.services.app.workflowStatuses.chanageStatus = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkflowStatuses/ChanageStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'webLog'
  (function(){

    abp.services.app.webLog = abp.services.app.webLog || {};

    // action 'getLatestWebLogs'
    abp.services.app.webLog.getLatestWebLogs = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebLog/GetLatestWebLogs',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'downloadWebLogs'
    abp.services.app.webLog.downloadWebLogs = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebLog/DownloadWebLogs',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'language'
  (function(){

    abp.services.app.language = abp.services.app.language || {};

    // action 'getLanguages'
    abp.services.app.language.getLanguages = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetLanguages',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLanguageForEdit'
    abp.services.app.language.getLanguageForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetLanguageForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrUpdateLanguage'
    abp.services.app.language.createOrUpdateLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/CreateOrUpdateLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteLanguage'
    abp.services.app.language.deleteLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/DeleteLanguage' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setDefaultLanguage'
    abp.services.app.language.setDefaultLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/SetDefaultLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getLanguageTexts'
    abp.services.app.language.getLanguageTexts = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetLanguageTexts' + abp.utils.buildQueryString([{ name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }, { name: 'sorting', value: input.sorting }, { name: 'sourceName', value: input.sourceName }, { name: 'baseLanguageName', value: input.baseLanguageName }, { name: 'targetLanguageName', value: input.targetLanguageName }, { name: 'targetValueFilter', value: input.targetValueFilter }, { name: 'filterText', value: input.filterText }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateLanguageText'
    abp.services.app.language.updateLanguageText = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/UpdateLanguageText',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'install'
  (function(){

    abp.services.app.install = abp.services.app.install || {};

    // action 'setup'
    abp.services.app.install.setup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Install/Setup',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAppSettingsJson'
    abp.services.app.install.getAppSettingsJson = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Install/GetAppSettingsJson',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkDatabase'
    abp.services.app.install.checkDatabase = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Install/CheckDatabase',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'friendship'
  (function(){

    abp.services.app.friendship = abp.services.app.friendship || {};

    // action 'createFriendshipRequest'
    abp.services.app.friendship.createFriendshipRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/CreateFriendshipRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createFriendshipRequestByUserName'
    abp.services.app.friendship.createFriendshipRequestByUserName = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/CreateFriendshipRequestByUserName',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'blockUser'
    abp.services.app.friendship.blockUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/BlockUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'unblockUser'
    abp.services.app.friendship.unblockUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/UnblockUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'acceptFriendshipRequest'
    abp.services.app.friendship.acceptFriendshipRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/AcceptFriendshipRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'edition'
  (function(){

    abp.services.app.edition = abp.services.app.edition || {};

    // action 'getEditions'
    abp.services.app.edition.getEditions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetEditions',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEditionForEdit'
    abp.services.app.edition.getEditionForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetEditionForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createEdition'
    abp.services.app.edition.createEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/CreateEdition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateEdition'
    abp.services.app.edition.updateEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/UpdateEdition',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteEdition'
    abp.services.app.edition.deleteEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/DeleteEdition' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'moveTenantsToAnotherEdition'
    abp.services.app.edition.moveTenantsToAnotherEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/MoveTenantsToAnotherEdition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEditionComboboxItems'
    abp.services.app.edition.getEditionComboboxItems = function(selectedEditionId, addAllItem, onlyFreeItems, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetEditionComboboxItems' + abp.utils.buildQueryString([{ name: 'selectedEditionId', value: selectedEditionId }, { name: 'addAllItem', value: addAllItem }, { name: 'onlyFreeItems', value: onlyFreeItems }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTenantCount'
    abp.services.app.edition.getTenantCount = function(editionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetTenantCount' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicEntityPropertyDefinition'
  (function(){

    abp.services.app.dynamicEntityPropertyDefinition = abp.services.app.dynamicEntityPropertyDefinition || {};

    // action 'getAllAllowedInputTypeNames'
    abp.services.app.dynamicEntityPropertyDefinition.getAllAllowedInputTypeNames = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyDefinition/GetAllAllowedInputTypeNames',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEntities'
    abp.services.app.dynamicEntityPropertyDefinition.getAllEntities = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyDefinition/GetAllEntities',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicEntityPropertyValue'
  (function(){

    abp.services.app.dynamicEntityPropertyValue = abp.services.app.dynamicEntityPropertyValue || {};

    // action 'get'
    abp.services.app.dynamicEntityPropertyValue.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.dynamicEntityPropertyValue.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/GetAll' + abp.utils.buildQueryString([{ name: 'entityId', value: input.entityId }, { name: 'propertyId', value: input.propertyId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicEntityPropertyValue.add = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Add',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicEntityPropertyValue.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicEntityPropertyValue['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllDynamicEntityPropertyValues'
    abp.services.app.dynamicEntityPropertyValue.getAllDynamicEntityPropertyValues = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/GetAllDynamicEntityPropertyValues' + abp.utils.buildQueryString([{ name: 'entityFullName', value: input.entityFullName }, { name: 'entityId', value: input.entityId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'insertOrUpdateAllValues'
    abp.services.app.dynamicEntityPropertyValue.insertOrUpdateAllValues = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/InsertOrUpdateAllValues',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'cleanValues'
    abp.services.app.dynamicEntityPropertyValue.cleanValues = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/CleanValues',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicProperty'
  (function(){

    abp.services.app.dynamicProperty = abp.services.app.dynamicProperty || {};

    // action 'get'
    abp.services.app.dynamicProperty.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.dynamicProperty.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicProperty.add = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Add',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicProperty.update = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Update',
        type: 'PUT',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicProperty['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'findAllowedInputType'
    abp.services.app.dynamicProperty.findAllowedInputType = function(name, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/FindAllowedInputType' + abp.utils.buildQueryString([{ name: 'name', value: name }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicPropertyValue'
  (function(){

    abp.services.app.dynamicPropertyValue = abp.services.app.dynamicPropertyValue || {};

    // action 'get'
    abp.services.app.dynamicPropertyValue.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllValuesOfDynamicProperty'
    abp.services.app.dynamicPropertyValue.getAllValuesOfDynamicProperty = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/GetAllValuesOfDynamicProperty' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicPropertyValue.add = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Add',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicPropertyValue.update = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Update',
        type: 'PUT',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicPropertyValue['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'demoUiComponents'
  (function(){

    abp.services.app.demoUiComponents = abp.services.app.demoUiComponents || {};

    // action 'sendAndGetDate'
    abp.services.app.demoUiComponents.sendAndGetDate = function(date, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetDate' + abp.utils.buildQueryString([{ name: 'date', value: date }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendAndGetDateTime'
    abp.services.app.demoUiComponents.sendAndGetDateTime = function(date, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetDateTime' + abp.utils.buildQueryString([{ name: 'date', value: date }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendAndGetDateRange'
    abp.services.app.demoUiComponents.sendAndGetDateRange = function(startDate, endDate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetDateRange' + abp.utils.buildQueryString([{ name: 'startDate', value: startDate }, { name: 'endDate', value: endDate }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getCountries'
    abp.services.app.demoUiComponents.getCountries = function(searchTerm, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/GetCountries' + abp.utils.buildQueryString([{ name: 'searchTerm', value: searchTerm }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendAndGetSelectedCountries'
    abp.services.app.demoUiComponents.sendAndGetSelectedCountries = function(selectedCountries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetSelectedCountries',
        type: 'POST',
        data: JSON.stringify(selectedCountries)
      }, ajaxParams));;
    };

    // action 'sendAndGetValue'
    abp.services.app.demoUiComponents.sendAndGetValue = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetValue' + abp.utils.buildQueryString([{ name: 'input', value: input }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'dashboardCustomization'
  (function(){

    abp.services.app.dashboardCustomization = abp.services.app.dashboardCustomization || {};

    // action 'getUserDashboard'
    abp.services.app.dashboardCustomization.getUserDashboard = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetUserDashboard' + abp.utils.buildQueryString([{ name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'savePage'
    abp.services.app.dashboardCustomization.savePage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/SavePage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'renamePage'
    abp.services.app.dashboardCustomization.renamePage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/RenamePage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'addNewPage'
    abp.services.app.dashboardCustomization.addNewPage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/AddNewPage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deletePage'
    abp.services.app.dashboardCustomization.deletePage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/DeletePage' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'addWidget'
    abp.services.app.dashboardCustomization.addWidget = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/AddWidget',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getDashboardDefinition'
    abp.services.app.dashboardCustomization.getDashboardDefinition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetDashboardDefinition' + abp.utils.buildQueryString([{ name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWidgetDefinitions'
    abp.services.app.dashboardCustomization.getAllWidgetDefinitions = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetAllWidgetDefinitions' + abp.utils.buildQueryString([{ name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSettingName'
    abp.services.app.dashboardCustomization.getSettingName = function(application, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetSettingName' + abp.utils.buildQueryString([{ name: 'application', value: application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'cMSConfigurations'
  (function(){

    abp.services.app.cMSConfigurations = abp.services.app.cMSConfigurations || {};

    // action 'getAll'
    abp.services.app.cMSConfigurations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CMSConfigurations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'bankIdFilter', value: input.bankIdFilter }, { name: 'usernameFilter', value: input.usernameFilter }, { name: 'passwordFilter', value: input.passwordFilter }, { name: 'cretificateSerialNoFilter', value: input.cretificateSerialNoFilter }, { name: 'cURIdentityFilter', value: input.cURIdentityFilter }, { name: 'agentIdFilter', value: input.agentIdFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCMSConfigurationForView'
    abp.services.app.cMSConfigurations.getCMSConfigurationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CMSConfigurations/GetCMSConfigurationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCMSConfigurationForEdit'
    abp.services.app.cMSConfigurations.getCMSConfigurationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CMSConfigurations/GetCMSConfigurationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.cMSConfigurations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CMSConfigurations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.cMSConfigurations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CMSConfigurations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCMSConfigurationsToExcel'
    abp.services.app.cMSConfigurations.getCMSConfigurationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CMSConfigurations/GetCMSConfigurationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'bankIdFilter', value: input.bankIdFilter }, { name: 'usernameFilter', value: input.usernameFilter }, { name: 'passwordFilter', value: input.passwordFilter }, { name: 'cretificateSerialNoFilter', value: input.cretificateSerialNoFilter }, { name: 'cURIdentityFilter', value: input.cURIdentityFilter }, { name: 'agentIdFilter', value: input.agentIdFilter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'paymentGatewayConfigurations'
  (function(){

    abp.services.app.paymentGatewayConfigurations = abp.services.app.paymentGatewayConfigurations || {};

    // action 'getAll'
    abp.services.app.paymentGatewayConfigurations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentGatewayConfigurations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'entityIdFilter', value: input.entityIdFilter }, { name: 'internationalEntityIdFilter', value: input.internationalEntityIdFilter }, { name: 'authorizationKeyFilter', value: input.authorizationKeyFilter }, { name: 'checkoutURLFilter', value: input.checkoutURLFilter }, { name: 'internationalCheckoutURLFilter', value: input.internationalCheckoutURLFilter }, { name: 'simulatorXIdFilter', value: input.simulatorXIdFilter }, { name: 'simulatorForceEnrolledFilter', value: input.simulatorForceEnrolledFilter }, { name: 'simulatorVerificationFilter', value: input.simulatorVerificationFilter }, { name: 'simulatorECIFilter', value: input.simulatorECIFilter }, { name: 'testModeFilter', value: input.testModeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentGatewayConfigurationForView'
    abp.services.app.paymentGatewayConfigurations.getPaymentGatewayConfigurationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentGatewayConfigurations/GetPaymentGatewayConfigurationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentGatewayConfigurationForEdit'
    abp.services.app.paymentGatewayConfigurations.getPaymentGatewayConfigurationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentGatewayConfigurations/GetPaymentGatewayConfigurationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.paymentGatewayConfigurations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentGatewayConfigurations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.paymentGatewayConfigurations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentGatewayConfigurations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPaymentGatewayConfigurationsToExcel'
    abp.services.app.paymentGatewayConfigurations.getPaymentGatewayConfigurationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentGatewayConfigurations/GetPaymentGatewayConfigurationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'entityIdFilter', value: input.entityIdFilter }, { name: 'internationalEntityIdFilter', value: input.internationalEntityIdFilter }, { name: 'authorizationKeyFilter', value: input.authorizationKeyFilter }, { name: 'checkoutURLFilter', value: input.checkoutURLFilter }, { name: 'internationalCheckoutURLFilter', value: input.internationalCheckoutURLFilter }, { name: 'simulatorXIdFilter', value: input.simulatorXIdFilter }, { name: 'simulatorForceEnrolledFilter', value: input.simulatorForceEnrolledFilter }, { name: 'simulatorVerificationFilter', value: input.simulatorVerificationFilter }, { name: 'simulatorECIFilter', value: input.simulatorECIFilter }, { name: 'testModeFilter', value: input.testModeFilter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'uiCustomizationSettings'
  (function(){

    abp.services.app.uiCustomizationSettings = abp.services.app.uiCustomizationSettings || {};

    // action 'getUiManagementSettings'
    abp.services.app.uiCustomizationSettings.getUiManagementSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/GetUiManagementSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeThemeWithDefaultValues'
    abp.services.app.uiCustomizationSettings.changeThemeWithDefaultValues = function(themeName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/ChangeThemeWithDefaultValues' + abp.utils.buildQueryString([{ name: 'themeName', value: themeName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateUiManagementSettings'
    abp.services.app.uiCustomizationSettings.updateUiManagementSettings = function(settings, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/UpdateUiManagementSettings',
        type: 'PUT',
        data: JSON.stringify(settings)
      }, ajaxParams));;
    };

    // action 'updateDefaultUiManagementSettings'
    abp.services.app.uiCustomizationSettings.updateDefaultUiManagementSettings = function(settings, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/UpdateDefaultUiManagementSettings',
        type: 'PUT',
        data: JSON.stringify(settings)
      }, ajaxParams));;
    };

    // action 'useSystemDefaultSettings'
    abp.services.app.uiCustomizationSettings.useSystemDefaultSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/UseSystemDefaultSettings',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'tenantSettings'
  (function(){

    abp.services.app.tenantSettings = abp.services.app.tenantSettings || {};

    // action 'getAllSettings'
    abp.services.app.tenantSettings.getAllSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/GetAllSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateAllSettings'
    abp.services.app.tenantSettings.updateAllSettings = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/UpdateAllSettings',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'clearLogo'
    abp.services.app.tenantSettings.clearLogo = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/ClearLogo',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'clearCustomCss'
    abp.services.app.tenantSettings.clearCustomCss = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/ClearCustomCss',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendTestEmail'
    abp.services.app.tenantSettings.sendTestEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/SendTestEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEnabledSocialLoginSettings'
    abp.services.app.tenantSettings.getEnabledSocialLoginSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/GetEnabledSocialLoginSettings',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostSettings'
  (function(){

    abp.services.app.hostSettings = abp.services.app.hostSettings || {};

    // action 'getAllSettings'
    abp.services.app.hostSettings.getAllSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/GetAllSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateAllSettings'
    abp.services.app.hostSettings.updateAllSettings = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/UpdateAllSettings',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendTestEmail'
    abp.services.app.hostSettings.sendTestEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/SendTestEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEnabledSocialLoginSettings'
    abp.services.app.hostSettings.getEnabledSocialLoginSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/GetEnabledSocialLoginSettings',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'commonLookup'
  (function(){

    abp.services.app.commonLookup = abp.services.app.commonLookup || {};

    // action 'getEditionsForCombobox'
    abp.services.app.commonLookup.getEditionsForCombobox = function(onlyFreeItems, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/GetEditionsForCombobox' + abp.utils.buildQueryString([{ name: 'onlyFreeItems', value: onlyFreeItems }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'findUsers'
    abp.services.app.commonLookup.findUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/FindUsers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getDefaultEditionName'
    abp.services.app.commonLookup.getDefaultEditionName = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/GetDefaultEditionName',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'chat'
  (function(){

    abp.services.app.chat = abp.services.app.chat || {};

    // action 'getUserChatFriendsWithSettings'
    abp.services.app.chat.getUserChatFriendsWithSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/GetUserChatFriendsWithSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserChatMessages'
    abp.services.app.chat.getUserChatMessages = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/GetUserChatMessages' + abp.utils.buildQueryString([{ name: 'tenantId', value: input.tenantId }, { name: 'userId', value: input.userId }, { name: 'minMessageId', value: input.minMessageId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'markAllUnreadMessagesOfUserAsRead'
    abp.services.app.chat.markAllUnreadMessagesOfUserAsRead = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'caching'
  (function(){

    abp.services.app.caching = abp.services.app.caching || {};

    // action 'getAllCaches'
    abp.services.app.caching.getAllCaches = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Caching/GetAllCaches',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'clearCache'
    abp.services.app.caching.clearCache = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Caching/ClearCache',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'clearAllCaches'
    abp.services.app.caching.clearAllCaches = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Caching/ClearAllCaches',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'user'
  (function(){

    abp.services.app.user = abp.services.app.user || {};

    // action 'getUsers'
    abp.services.app.user.getUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUsers' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'permissions', value: input.permissions }, { name: 'role', value: input.role }, { name: 'customerId', value: input.customerId }, { name: 'userType', value: input.userType }, { name: 'billerId', value: input.billerId }, { name: 'onlyLockedUsers', value: input.onlyLockedUsers }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUsersToExcel'
    abp.services.app.user.getUsersToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUsersToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'permissions', value: input.permissions }, { name: 'role', value: input.role }, { name: 'customerId', value: input.customerId }, { name: 'userType', value: input.userType }, { name: 'billerId', value: input.billerId }, { name: 'onlyLockedUsers', value: input.onlyLockedUsers }, { name: 'sorting', value: input.sorting }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserForEdit'
    abp.services.app.user.getUserForEdit = function(input, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserPermissionsForEdit'
    abp.services.app.user.getUserPermissionsForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserPermissionsForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'resetUserSpecificPermissions'
    abp.services.app.user.resetUserSpecificPermissions = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ResetUserSpecificPermissions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateUserPermissions'
    abp.services.app.user.updateUserPermissions = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/UpdateUserPermissions' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createOrUpdateUser'
    abp.services.app.user.createOrUpdateUser = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/CreateOrUpdateUser' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getUserById'
    abp.services.app.user.getUserById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrUpdateCustomerUser'
    abp.services.app.user.createOrUpdateCustomerUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/CreateOrUpdateCustomerUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteUser'
    abp.services.app.user.deleteUser = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/DeleteUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'changeStatus'
    abp.services.app.user.changeStatus = function(id, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ChangeStatus' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'unlockUser'
    abp.services.app.user.unlockUser = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/UnlockUser' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getByBiometric'
    abp.services.app.user.getByBiometric = function(biometric, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetByBiometric' + abp.utils.buildQueryString([{ name: 'biometric', value: biometric }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'processUserActions'
    abp.services.app.user.processUserActions = function(requestJSON, actionTypeCode, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ProcessUserActions' + abp.utils.buildQueryString([{ name: 'requestJSON', value: requestJSON }, { name: 'actionTypeCode', value: actionTypeCode }, { name: 'entityId', value: entityId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllExternalInstituationForTableDropdown'
    abp.services.app.user.getAllExternalInstituationForTableDropdown = function(billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetAllExternalInstituationForTableDropdown' + abp.utils.buildQueryString([{ name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteUnverifiedUsers'
    abp.services.app.user.deleteUnverifiedUsers = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/DeleteUnverifiedUsers',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllGeoLocationForTableDropdown'
    abp.services.app.user.getAllGeoLocationForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetAllGeoLocationForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserByUserProfile'
    abp.services.app.user.getUserByUserProfile = function(userProfileId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserByUserProfile' + abp.utils.buildQueryString([{ name: 'userProfileId', value: userProfileId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'userLink'
  (function(){

    abp.services.app.userLink = abp.services.app.userLink || {};

    // action 'linkToUser'
    abp.services.app.userLink.linkToUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/LinkToUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getLinkedUsers'
    abp.services.app.userLink.getLinkedUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/GetLinkedUsers' + abp.utils.buildQueryString([{ name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }, { name: 'sorting', value: input.sorting }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRecentlyUsedLinkedUsers'
    abp.services.app.userLink.getRecentlyUsedLinkedUsers = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/GetRecentlyUsedLinkedUsers',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'unlinkUser'
    abp.services.app.userLink.unlinkUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/UnlinkUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'userLogin'
  (function(){

    abp.services.app.userLogin = abp.services.app.userLogin || {};

    // action 'getRecentUserLoginAttempts'
    abp.services.app.userLogin.getRecentUserLoginAttempts = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLogin/GetRecentUserLoginAttempts',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'profile'
  (function(){

    abp.services.app.profile = abp.services.app.profile || {};

    // action 'getCurrentUserProfileForEdit'
    abp.services.app.profile.getCurrentUserProfileForEdit = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetCurrentUserProfileForEdit',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'disableGoogleAuthenticator'
    abp.services.app.profile.disableGoogleAuthenticator = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/DisableGoogleAuthenticator',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateGoogleAuthenticatorKey'
    abp.services.app.profile.updateGoogleAuthenticatorKey = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/UpdateGoogleAuthenticatorKey',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'sendVerificationSmsForCustomer'
    abp.services.app.profile.sendVerificationSmsForCustomer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/SendVerificationSmsForCustomer',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendVerificationSms'
    abp.services.app.profile.sendVerificationSms = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/SendVerificationSms',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendPasswordResetOTP'
    abp.services.app.profile.sendPasswordResetOTP = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/SendPasswordResetOTP',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'verifySmsCodeForCustomer'
    abp.services.app.profile.verifySmsCodeForCustomer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/VerifySmsCodeForCustomer',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'verifySmsCode'
    abp.services.app.profile.verifySmsCode = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/VerifySmsCode',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'prepareCollectedData'
    abp.services.app.profile.prepareCollectedData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/PrepareCollectedData',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateCurrentUserProfile'
    abp.services.app.profile.updateCurrentUserProfile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/UpdateCurrentUserProfile',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.profile.changePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/ChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateProfilePicture'
    abp.services.app.profile.updateProfilePicture = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/UpdateProfilePicture',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getPasswordComplexitySetting'
    abp.services.app.profile.getPasswordComplexitySetting = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetPasswordComplexitySetting',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfilePicture'
    abp.services.app.profile.getProfilePicture = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePicture',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfilePictureByUserName'
    abp.services.app.profile.getProfilePictureByUserName = function(username, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePictureByUserName' + abp.utils.buildQueryString([{ name: 'username', value: username }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFriendProfilePicture'
    abp.services.app.profile.getFriendProfilePicture = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetFriendProfilePicture' + abp.utils.buildQueryString([{ name: 'userId', value: input.userId }, { name: 'tenantId', value: input.tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfilePictureByUser'
    abp.services.app.profile.getProfilePictureByUser = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePictureByUser' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeLanguage'
    abp.services.app.profile.changeLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/ChangeLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getProfilePictureByIdInternal'
    abp.services.app.profile.getProfilePictureByIdInternal = function(profilePictureId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePictureByIdInternal' + abp.utils.buildQueryString([{ name: 'profilePictureId', value: profilePictureId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'userDelegation'
  (function(){

    abp.services.app.userDelegation = abp.services.app.userDelegation || {};

    // action 'getDelegatedUsers'
    abp.services.app.userDelegation.getDelegatedUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/GetDelegatedUsers' + abp.utils.buildQueryString([{ name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }, { name: 'sorting', value: input.sorting }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delegateNewUser'
    abp.services.app.userDelegation.delegateNewUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/DelegateNewUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'removeDelegation'
    abp.services.app.userDelegation.removeDelegation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/RemoveDelegation' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getActiveUserDelegations'
    abp.services.app.userDelegation.getActiveUserDelegations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/GetActiveUserDelegations',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'role'
  (function(){

    abp.services.app.role = abp.services.app.role || {};

    // action 'getRoles'
    abp.services.app.role.getRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoles' + abp.utils.buildQueryString([{ name: 'permissions', value: input.permissions }, { name: 'customerId', value: input.customerId }, { name: 'userType', value: input.userType }, { name: 'billerId', value: input.billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoleForEdit'
    abp.services.app.role.getRoleForEdit = function(input, billerId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoleForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'billerId', value: billerId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrUpdateRole'
    abp.services.app.role.createOrUpdateRole = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/CreateOrUpdateRole' + abp.utils.buildQueryString([{ name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getRoleById'
    abp.services.app.role.getRoleById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoleById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteRole'
    abp.services.app.role.deleteRole = function(input, isMakerCheckerIgnored, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/DeleteRole' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'isMakerCheckerIgnored', value: isMakerCheckerIgnored }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getRolesByUserId'
    abp.services.app.role.getRolesByUserId = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRolesByUserId' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'processRolesActions'
    abp.services.app.role.processRolesActions = function(requestJSON, actionTypeCode, entityId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/ProcessRolesActions' + abp.utils.buildQueryString([{ name: 'requestJSON', value: requestJSON }, { name: 'actionTypeCode', value: actionTypeCode }, { name: 'entityId', value: entityId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'permission'
  (function(){

    abp.services.app.permission = abp.services.app.permission || {};

    // action 'getAllPermissions'
    abp.services.app.permission.getAllPermissions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/GetAllPermissions',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'account'
  (function(){

    abp.services.app.account = abp.services.app.account || {};

    // action 'isTenantAvailable'
    abp.services.app.account.isTenantAvailable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/IsTenantAvailable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resolveTenantId'
    abp.services.app.account.resolveTenantId = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ResolveTenantId',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'register'
    abp.services.app.account.register = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/Register',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendPasswordResetCode'
    abp.services.app.account.sendPasswordResetCode = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SendPasswordResetCode',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.account.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPasswordSms'
    abp.services.app.account.resetPasswordSms = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ResetPasswordSms',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendEmailActivationLink'
    abp.services.app.account.sendEmailActivationLink = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SendEmailActivationLink',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'activateEmail'
    abp.services.app.account.activateEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ActivateEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'impersonate'
    abp.services.app.account.impersonate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/Impersonate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delegatedImpersonate'
    abp.services.app.account.delegatedImpersonate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/DelegatedImpersonate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'backToImpersonator'
    abp.services.app.account.backToImpersonator = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/BackToImpersonator',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'switchToLinkedAccount'
    abp.services.app.account.switchToLinkedAccount = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SwitchToLinkedAccount',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'auditLog'
  (function(){

    abp.services.app.auditLog = abp.services.app.auditLog || {};

    // action 'getAuditLogs'
    abp.services.app.auditLog.getAuditLogs = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetAuditLogs' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'serviceName', value: input.serviceName }, { name: 'methodName', value: input.methodName }, { name: 'browserInfo', value: input.browserInfo }, { name: 'hasException', value: input.hasException }, { name: 'minExecutionDuration', value: input.minExecutionDuration }, { name: 'maxExecutionDuration', value: input.maxExecutionDuration }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAuditLogsToExcel'
    abp.services.app.auditLog.getAuditLogsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetAuditLogsToExcel' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'serviceName', value: input.serviceName }, { name: 'methodName', value: input.methodName }, { name: 'browserInfo', value: input.browserInfo }, { name: 'hasException', value: input.hasException }, { name: 'minExecutionDuration', value: input.minExecutionDuration }, { name: 'maxExecutionDuration', value: input.maxExecutionDuration }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityHistoryObjectTypes'
    abp.services.app.auditLog.getEntityHistoryObjectTypes = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityHistoryObjectTypes',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityChanges'
    abp.services.app.auditLog.getEntityChanges = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityChanges' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'entityTypeFullName', value: input.entityTypeFullName }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityTypeChanges'
    abp.services.app.auditLog.getEntityTypeChanges = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityTypeChanges' + abp.utils.buildQueryString([{ name: 'entityTypeFullName', value: input.entityTypeFullName }, { name: 'entityId', value: input.entityId }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityChangesToExcel'
    abp.services.app.auditLog.getEntityChangesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityChangesToExcel' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'entityTypeFullName', value: input.entityTypeFullName }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityPropertyChanges'
    abp.services.app.auditLog.getEntityPropertyChanges = function(entityChangeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityPropertyChanges' + abp.utils.buildQueryString([{ name: 'entityChangeId', value: entityChangeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

})();
